import * as mergeOptions from 'merge-options';
export function validateInput(schema, value) {
    var retVal = { typeName: value.typeName, id: value.id, attributes: {}, relationships: {} };
    var typeAttrs = Object.keys(schema.attributes || {});
    var valAttrs = Object.keys(value.attributes || {});
    var typeRels = Object.keys(schema.relationships || {});
    var valRels = Object.keys(value.relationships || {});
    var invalidAttrs = valAttrs.filter(function (item) { return typeAttrs.indexOf(item) < 0; });
    var invalidRels = valRels.filter(function (item) { return typeRels.indexOf(item) < 0; });
    if (invalidAttrs.length > 0) {
        throw new Error("Invalid attributes on value object: " + JSON.stringify(invalidAttrs));
    }
    if (invalidRels.length > 0) {
        throw new Error("Invalid relationships on value object: " + JSON.stringify(invalidRels));
    }
    for (var attrName in schema.attributes) {
        if (!value.attributes[attrName] && (schema.attributes[attrName].default !== undefined)) {
            if (Array.isArray(schema.attributes[attrName].default)) {
                retVal.attributes[attrName] = schema.attributes[attrName].default.concat();
            }
            else if (typeof schema.attributes[attrName].default === 'object') {
                retVal.attributes[attrName] = Object.assign({}, schema.attributes[attrName].default);
            }
            else {
                retVal.attributes[attrName] = schema.attributes[attrName].default;
            }
        }
    }
    for (var relName in schema.relationships) {
        if (value.relationships && value.relationships[relName] && !Array.isArray(value.relationships[relName])) {
            throw new Error("relation " + relName + " is not an array");
        }
    }
    return mergeOptions({}, value, retVal);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDO1lBQ3BFLENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztJQUVELEdBQUcsQ0FBQyxDQUFDLElBQU0sT0FBTyxJQUFJLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1FBQzNDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxhQUFhLElBQUksS0FBSyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN4RyxNQUFNLElBQUksS0FBSyxDQUFDLGNBQVksT0FBTyxxQkFBa0IsQ0FBQyxDQUFDO1FBQ3pELENBQUM7SUFDSCxDQUFDO0lBQ0QsTUFBTSxDQUFDLFlBQVksQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3pDLENBQUMiLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIG1lcmdlT3B0aW9ucyBmcm9tICdtZXJnZS1vcHRpb25zJztcblxuaW1wb3J0IHsgTW9kZWxEYXRhLCBJbmRlZmluaXRlTW9kZWxEYXRhLCBNb2RlbFNjaGVtYSB9IGZyb20gJy4vZGF0YVR5cGVzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlSW5wdXQoc2NoZW1hOiBNb2RlbFNjaGVtYSwgdmFsdWU6IEluZGVmaW5pdGVNb2RlbERhdGEpOiBNb2RlbERhdGEge1xuICBjb25zdCByZXRWYWwgPSB7IHR5cGVOYW1lOiB2YWx1ZS50eXBlTmFtZSwgaWQ6IHZhbHVlLmlkLCBhdHRyaWJ1dGVzOiB7fSwgcmVsYXRpb25zaGlwczoge30gfTtcbiAgY29uc3QgdHlwZUF0dHJzID0gT2JqZWN0LmtleXMoc2NoZW1hLmF0dHJpYnV0ZXMgfHwge30pO1xuICBjb25zdCB2YWxBdHRycyA9IE9iamVjdC5rZXlzKHZhbHVlLmF0dHJpYnV0ZXMgfHwge30pO1xuICBjb25zdCB0eXBlUmVscyA9IE9iamVjdC5rZXlzKHNjaGVtYS5yZWxhdGlvbnNoaXBzIHx8IHt9KTtcbiAgY29uc3QgdmFsUmVscyA9IE9iamVjdC5rZXlzKHZhbHVlLnJlbGF0aW9uc2hpcHMgfHwge30pO1xuXG4gIGNvbnN0IGludmFsaWRBdHRycyA9IHZhbEF0dHJzLmZpbHRlcihpdGVtID0+IHR5cGVBdHRycy5pbmRleE9mKGl0ZW0pIDwgMCk7XG4gIGNvbnN0IGludmFsaWRSZWxzID0gdmFsUmVscy5maWx0ZXIoaXRlbSA9PiB0eXBlUmVscy5pbmRleE9mKGl0ZW0pIDwgMCk7XG5cbiAgaWYgKGludmFsaWRBdHRycy5sZW5ndGggPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGF0dHJpYnV0ZXMgb24gdmFsdWUgb2JqZWN0OiAke0pTT04uc3RyaW5naWZ5KGludmFsaWRBdHRycyl9YCk7XG4gIH1cblxuICBpZiAoaW52YWxpZFJlbHMubGVuZ3RoID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCByZWxhdGlvbnNoaXBzIG9uIHZhbHVlIG9iamVjdDogJHtKU09OLnN0cmluZ2lmeShpbnZhbGlkUmVscyl9YCk7XG4gIH1cblxuXG4gIGZvciAoY29uc3QgYXR0ck5hbWUgaW4gc2NoZW1hLmF0dHJpYnV0ZXMpIHtcbiAgICBpZiAoIXZhbHVlLmF0dHJpYnV0ZXNbYXR0ck5hbWVdICYmIChzY2hlbWEuYXR0cmlidXRlc1thdHRyTmFtZV0uZGVmYXVsdCAhPT0gdW5kZWZpbmVkKSkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2NoZW1hLmF0dHJpYnV0ZXNbYXR0ck5hbWVdLmRlZmF1bHQpKSB7XG4gICAgICAgIHJldFZhbC5hdHRyaWJ1dGVzW2F0dHJOYW1lXSA9IHNjaGVtYS5hdHRyaWJ1dGVzW2F0dHJOYW1lXS5kZWZhdWx0LmNvbmNhdCgpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc2NoZW1hLmF0dHJpYnV0ZXNbYXR0ck5hbWVdLmRlZmF1bHQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldFZhbC5hdHRyaWJ1dGVzW2F0dHJOYW1lXSA9IE9iamVjdC5hc3NpZ24oe30sIHNjaGVtYS5hdHRyaWJ1dGVzW2F0dHJOYW1lXS5kZWZhdWx0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldFZhbC5hdHRyaWJ1dGVzW2F0dHJOYW1lXSA9IHNjaGVtYS5hdHRyaWJ1dGVzW2F0dHJOYW1lXS5kZWZhdWx0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAoY29uc3QgcmVsTmFtZSBpbiBzY2hlbWEucmVsYXRpb25zaGlwcykge1xuICAgIGlmICh2YWx1ZS5yZWxhdGlvbnNoaXBzICYmIHZhbHVlLnJlbGF0aW9uc2hpcHNbcmVsTmFtZV0gJiYgIUFycmF5LmlzQXJyYXkodmFsdWUucmVsYXRpb25zaGlwc1tyZWxOYW1lXSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgcmVsYXRpb24gJHtyZWxOYW1lfSBpcyBub3QgYW4gYXJyYXlgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1lcmdlT3B0aW9ucyh7fSwgdmFsdWUsIHJldFZhbCk7XG59XG4iXX0=
