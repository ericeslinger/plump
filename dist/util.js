import * as mergeOptions from 'merge-options';
export function validateInput(type, value) {
    var retVal = { type: value.type, id: value.id, attributes: {}, relationships: {} };
    var typeAttrs = Object.keys(type.$schema.attributes || {});
    var valAttrs = Object.keys(value.attributes || {});
    var typeRels = Object.keys(type.$schema.relationships || {});
    var valRels = Object.keys(value.relationships || {});
    var invalidAttrs = valAttrs.filter(function (item) { return typeAttrs.indexOf(item) < 0; });
    var invalidRels = valRels.filter(function (item) { return typeRels.indexOf(item) < 0; });
    if (invalidAttrs.length > 0) {
        throw new Error("Invalid attributes on value object: " + JSON.stringify(invalidAttrs));
    }
    if (invalidRels.length > 0) {
        throw new Error("Invalid relationships on value object: " + JSON.stringify(invalidRels));
    }
    for (var attrName in type.$schema.attributes) {
        if (!value.attributes[attrName] && (type.$schema.attributes[attrName].default !== undefined)) {
            if (Array.isArray(type.$schema.attributes[attrName].default)) {
                retVal.attributes[attrName] = type.$schema.attributes[attrName].default.concat();
            }
            else if (typeof type.$schema.attributes[attrName].default === 'object') {
                retVal.attributes[attrName] = Object.assign({}, type.$schema.attributes[attrName].default);
            }
            else {
                retVal.attributes[attrName] = type.$schema.attributes[attrName].default;
            }
        }
    }
    for (var relName in type.$schema.relationships) {
        if (value.relationships && value.relationships[relName] && !Array.isArray(value.relationships[relName])) {
            throw new Error("relation " + relName + " is not an array");
        }
    }
    return mergeOptions({}, value, retVal);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QU8sQ0FBQyxDQUFDO1lBQzdGLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDTixNQUFNLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQztZQUMxRSxDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUM7SUFFRCxHQUFHLENBQUMsQ0FBQyxJQUFNLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7UUFDakQsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLGFBQWEsSUFBSSxLQUFLLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3hHLE1BQU0sSUFBSSxLQUFLLENBQUMsY0FBWSxPQUFPLHFCQUFrQixDQUFDLENBQUM7UUFDekQsQ0FBQztJQUNILENBQUM7SUFDRCxNQUFNLENBQUMsWUFBWSxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDekMsQ0FBQyIsImZpbGUiOiJ1dGlsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgbWVyZ2VPcHRpb25zIGZyb20gJ21lcmdlLW9wdGlvbnMnO1xuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVJbnB1dCh0eXBlLCB2YWx1ZSkge1xuICBjb25zdCByZXRWYWwgPSB7IHR5cGU6IHZhbHVlLnR5cGUsIGlkOiB2YWx1ZS5pZCwgYXR0cmlidXRlczoge30sIHJlbGF0aW9uc2hpcHM6IHt9IH07XG4gIGNvbnN0IHR5cGVBdHRycyA9IE9iamVjdC5rZXlzKHR5cGUuJHNjaGVtYS5hdHRyaWJ1dGVzIHx8IHt9KTtcbiAgY29uc3QgdmFsQXR0cnMgPSBPYmplY3Qua2V5cyh2YWx1ZS5hdHRyaWJ1dGVzIHx8IHt9KTtcbiAgY29uc3QgdHlwZVJlbHMgPSBPYmplY3Qua2V5cyh0eXBlLiRzY2hlbWEucmVsYXRpb25zaGlwcyB8fCB7fSk7XG4gIGNvbnN0IHZhbFJlbHMgPSBPYmplY3Qua2V5cyh2YWx1ZS5yZWxhdGlvbnNoaXBzIHx8IHt9KTtcblxuICBjb25zdCBpbnZhbGlkQXR0cnMgPSB2YWxBdHRycy5maWx0ZXIoaXRlbSA9PiB0eXBlQXR0cnMuaW5kZXhPZihpdGVtKSA8IDApO1xuICBjb25zdCBpbnZhbGlkUmVscyA9IHZhbFJlbHMuZmlsdGVyKGl0ZW0gPT4gdHlwZVJlbHMuaW5kZXhPZihpdGVtKSA8IDApO1xuXG4gIGlmIChpbnZhbGlkQXR0cnMubGVuZ3RoID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBhdHRyaWJ1dGVzIG9uIHZhbHVlIG9iamVjdDogJHtKU09OLnN0cmluZ2lmeShpbnZhbGlkQXR0cnMpfWApO1xuICB9XG5cbiAgaWYgKGludmFsaWRSZWxzLmxlbmd0aCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgcmVsYXRpb25zaGlwcyBvbiB2YWx1ZSBvYmplY3Q6ICR7SlNPTi5zdHJpbmdpZnkoaW52YWxpZFJlbHMpfWApO1xuICB9XG5cblxuICBmb3IgKGNvbnN0IGF0dHJOYW1lIGluIHR5cGUuJHNjaGVtYS5hdHRyaWJ1dGVzKSB7XG4gICAgaWYgKCF2YWx1ZS5hdHRyaWJ1dGVzW2F0dHJOYW1lXSAmJiAodHlwZS4kc2NoZW1hLmF0dHJpYnV0ZXNbYXR0ck5hbWVdLmRlZmF1bHQgIT09IHVuZGVmaW5lZCkpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHR5cGUuJHNjaGVtYS5hdHRyaWJ1dGVzW2F0dHJOYW1lXS5kZWZhdWx0KSkge1xuICAgICAgICByZXRWYWwuYXR0cmlidXRlc1thdHRyTmFtZV0gPSB0eXBlLiRzY2hlbWEuYXR0cmlidXRlc1thdHRyTmFtZV0uZGVmYXVsdC5jb25jYXQoKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHR5cGUuJHNjaGVtYS5hdHRyaWJ1dGVzW2F0dHJOYW1lXS5kZWZhdWx0ID09PSAnb2JqZWN0Jykge1xuICAgICAgICByZXRWYWwuYXR0cmlidXRlc1thdHRyTmFtZV0gPSBPYmplY3QuYXNzaWduKHt9LCB0eXBlLiRzY2hlbWEuYXR0cmlidXRlc1thdHRyTmFtZV0uZGVmYXVsdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXRWYWwuYXR0cmlidXRlc1thdHRyTmFtZV0gPSB0eXBlLiRzY2hlbWEuYXR0cmlidXRlc1thdHRyTmFtZV0uZGVmYXVsdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKGNvbnN0IHJlbE5hbWUgaW4gdHlwZS4kc2NoZW1hLnJlbGF0aW9uc2hpcHMpIHtcbiAgICBpZiAodmFsdWUucmVsYXRpb25zaGlwcyAmJiB2YWx1ZS5yZWxhdGlvbnNoaXBzW3JlbE5hbWVdICYmICFBcnJheS5pc0FycmF5KHZhbHVlLnJlbGF0aW9uc2hpcHNbcmVsTmFtZV0pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHJlbGF0aW9uICR7cmVsTmFtZX0gaXMgbm90IGFuIGFycmF5YCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBtZXJnZU9wdGlvbnMoe30sIHZhbHVlLCByZXRWYWwpO1xufVxuIl19
