'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Guild = undefined;

var _Rx = require('rxjs-es/Rx');

var _Rx2 = _interopRequireDefault(_Rx);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const $types = Symbol('$types');
const $storage = Symbol('$storage');
const $terminal = Symbol('$terminal');
const $subscriptions = Symbol('$subscriptions');

class Guild {
  constructor(opts = {}) {
    const options = Object.assign({}, {
      storage: []
    }, opts);
    this[$subscriptions] = {};
    options.storage.forEach(s => this.addStore(s));
  }

  addStore(store) {
    if (store.terminal) {
      if (this[$terminal] === undefined) {
        this[$terminal] = store;
      } else {
        throw new Error('cannot have more than one terminal store');
      }
    } else {
      this[$storage].push(store);
    }
    store.onUpdate(u => {
      this[$storage].forEach(storage => {
        const Type = this[$types][u.type];
        storage.onCacheableRead(Type, Object.assign({}, u.value, { [Type.$id]: u.id }));
      });
      if (this[$subscriptions][u.type] && this[$subscriptions][u.type][u.id]) {
        this[$subscriptions][u.type][u.id].next(u.value);
      }
    });
  }

  find(t, id) {
    let Type = t;
    if (typeof t === 'string') {
      Type = this[$types][t];
    }
    const retVal = new Type({ [Type.$id]: id }, this);
    return retVal;
  }

  // LOAD (type/id), SIDELOAD (type/id/side)? Or just LOADALL?
  // LOAD needs to scrub through hot caches first

  subscribe(typeName, id, handler) {
    if (this[$subscriptions][typeName] === undefined) {
      this[$subscriptions][typeName] = {};
    }
    if (this[$subscriptions][typeName][id] === undefined) {
      this[$subscriptions][typeName][id] = new _Rx2.default.Subject();
    }
    return this[$subscriptions][typeName][id].subscribe(handler);
  }

  has(type, id, field) {
    return this[$storage].reduce((thenable, storage) => {
      return thenable.then(v => {
        return v !== null ? v : storage.has(type, id, field);
      });
    }, Promise.resolve(null));
  }

  get(type, id) {
    return this[$storage].reduce((thenable, storage) => {
      return thenable.then(v => {
        if (v !== null) {
          return v;
        } else {
          return storage.read(type, id);
        }
      });
    }, Promise.resolve(null));
  }
}
exports.Guild = Guild;
//# sourceMappingURL=data:application/json;base64,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VyxPQUFYLEtBQXVCO0FBQ2xELGFBQU8sU0FBUyxJQUFULENBQWUsQ0FBRCxJQUFPO0FBQzFCLGVBQVEsTUFBTSxJQUFQLEdBQWUsQ0FBZixHQUFtQixRQUFRLEdBQVIsQ0FBWSxJQUFaLEVBQWtCLEVBQWxCLEVBQXNCLEtBQXRCLENBQTFCO0FBQ0QsT0FGTSxDQUFQO0FBR0QsS0FKTSxFQUlKLFFBQVEsT0FBUixDQUFnQixJQUFoQixDQUpJLENBQVA7QUFLRDs7QUFFRCxNQUFJLElBQUosRUFBVSxFQUFWLEVBQWM7QUFDWixXQUFPLEtBQUssUUFBTCxFQUFlLE1BQWYsQ0FBc0IsQ0FBQyxRQUFELEVBQVcsT0FBWCxLQUF1QjtBQUNsRCxhQUFPLFNBQVMsSUFBVCxDQUFlLENBQUQsSUFBTztBQUMxQixZQUFJLE1BQU0sSUFBVixFQUFnQjtBQUNkLGlCQUFPLENBQVA7QUFDRCxTQUZELE1BRU87QUFDTCxpQkFBTyxRQUFRLElBQVIsQ0FBYSxJQUFiLEVBQW1CLEVBQW5CLENBQVA7QUFDRDtBQUNGLE9BTk0sQ0FBUDtBQU9ELEtBUk0sRUFRSixRQUFRLE9BQVIsQ0FBZ0IsSUFBaEIsQ0FSSSxDQUFQO0FBU0Q7QUF0RWdCO1FBQU4sSyxHQUFBLEsiLCJmaWxlIjoiZ3VpbGQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCAkdHlwZXMgPSBTeW1ib2woJyR0eXBlcycpO1xuY29uc3QgJHN0b3JhZ2UgPSBTeW1ib2woJyRzdG9yYWdlJyk7XG5jb25zdCAkdGVybWluYWwgPSBTeW1ib2woJyR0ZXJtaW5hbCcpO1xuY29uc3QgJHN1YnNjcmlwdGlvbnMgPSBTeW1ib2woJyRzdWJzY3JpcHRpb25zJyk7XG5cbmltcG9ydCBSeCBmcm9tICdyeGpzLWVzL1J4JztcblxuZXhwb3J0IGNsYXNzIEd1aWxkIHtcbiAgY29uc3RydWN0b3Iob3B0cyA9IHt9KSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIHtcbiAgICAgIHN0b3JhZ2U6IFtdLFxuICAgIH0sIG9wdHMpO1xuICAgIHRoaXNbJHN1YnNjcmlwdGlvbnNdID0ge307XG4gICAgb3B0aW9ucy5zdG9yYWdlLmZvckVhY2goKHMpID0+IHRoaXMuYWRkU3RvcmUocykpO1xuICB9XG5cbiAgYWRkU3RvcmUoc3RvcmUpIHtcbiAgICBpZiAoc3RvcmUudGVybWluYWwpIHtcbiAgICAgIGlmICh0aGlzWyR0ZXJtaW5hbF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzWyR0ZXJtaW5hbF0gPSBzdG9yZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY2Fubm90IGhhdmUgbW9yZSB0aGFuIG9uZSB0ZXJtaW5hbCBzdG9yZScpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzWyRzdG9yYWdlXS5wdXNoKHN0b3JlKTtcbiAgICB9XG4gICAgc3RvcmUub25VcGRhdGUoKHUpID0+IHtcbiAgICAgIHRoaXNbJHN0b3JhZ2VdLmZvckVhY2goKHN0b3JhZ2UpID0+IHtcbiAgICAgICAgY29uc3QgVHlwZSA9IHRoaXNbJHR5cGVzXVt1LnR5cGVdO1xuICAgICAgICBzdG9yYWdlLm9uQ2FjaGVhYmxlUmVhZChUeXBlLCBPYmplY3QuYXNzaWduKHt9LCB1LnZhbHVlLCB7W1R5cGUuJGlkXTogdS5pZH0pKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKHRoaXNbJHN1YnNjcmlwdGlvbnNdW3UudHlwZV0gJiYgdGhpc1skc3Vic2NyaXB0aW9uc11bdS50eXBlXVt1LmlkXSkge1xuICAgICAgICB0aGlzWyRzdWJzY3JpcHRpb25zXVt1LnR5cGVdW3UuaWRdLm5leHQodS52YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmaW5kKHQsIGlkKSB7XG4gICAgbGV0IFR5cGUgPSB0O1xuICAgIGlmICh0eXBlb2YgdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIFR5cGUgPSB0aGlzWyR0eXBlc11bdF07XG4gICAgfVxuICAgIGNvbnN0IHJldFZhbCA9IG5ldyBUeXBlKHtbVHlwZS4kaWRdOiBpZH0sIHRoaXMpO1xuICAgIHJldHVybiByZXRWYWw7XG4gIH1cblxuICAvLyBMT0FEICh0eXBlL2lkKSwgU0lERUxPQUQgKHR5cGUvaWQvc2lkZSk/IE9yIGp1c3QgTE9BREFMTD9cbiAgLy8gTE9BRCBuZWVkcyB0byBzY3J1YiB0aHJvdWdoIGhvdCBjYWNoZXMgZmlyc3RcblxuICBzdWJzY3JpYmUodHlwZU5hbWUsIGlkLCBoYW5kbGVyKSB7XG4gICAgaWYgKHRoaXNbJHN1YnNjcmlwdGlvbnNdW3R5cGVOYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzWyRzdWJzY3JpcHRpb25zXVt0eXBlTmFtZV0gPSB7fTtcbiAgICB9XG4gICAgaWYgKHRoaXNbJHN1YnNjcmlwdGlvbnNdW3R5cGVOYW1lXVtpZF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpc1skc3Vic2NyaXB0aW9uc11bdHlwZU5hbWVdW2lkXSA9IG5ldyBSeC5TdWJqZWN0KCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzWyRzdWJzY3JpcHRpb25zXVt0eXBlTmFtZV1baWRdLnN1YnNjcmliZShoYW5kbGVyKTtcbiAgfVxuXG4gIGhhcyh0eXBlLCBpZCwgZmllbGQpIHtcbiAgICByZXR1cm4gdGhpc1skc3RvcmFnZV0ucmVkdWNlKCh0aGVuYWJsZSwgc3RvcmFnZSkgPT4ge1xuICAgICAgcmV0dXJuIHRoZW5hYmxlLnRoZW4oKHYpID0+IHtcbiAgICAgICAgcmV0dXJuICh2ICE9PSBudWxsKSA/IHYgOiBzdG9yYWdlLmhhcyh0eXBlLCBpZCwgZmllbGQpO1xuICAgICAgfSk7XG4gICAgfSwgUHJvbWlzZS5yZXNvbHZlKG51bGwpKTtcbiAgfVxuXG4gIGdldCh0eXBlLCBpZCkge1xuICAgIHJldHVybiB0aGlzWyRzdG9yYWdlXS5yZWR1Y2UoKHRoZW5hYmxlLCBzdG9yYWdlKSA9PiB7XG4gICAgICByZXR1cm4gdGhlbmFibGUudGhlbigodikgPT4ge1xuICAgICAgICBpZiAodiAhPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiB2O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBzdG9yYWdlLnJlYWQodHlwZSwgaWQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LCBQcm9taXNlLnJlc29sdmUobnVsbCkpO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
