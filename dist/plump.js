"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
exports.types = {};
function pathExists(obj, path) {
    return (path.split('.').reduce(function (acc, next) {
        if (acc === false) {
            return false;
        }
        else {
            if (!!acc[next]) {
                return acc[next];
            }
            else {
                return false;
            }
        }
    }, obj) !== false);
}
exports.pathExists = pathExists;
var Plump = (function () {
    function Plump(terminal) {
        this.terminal = terminal;
        this.types = {};
        this.teardownSubject = new rxjs_1.Subject();
        this.terminal.terminal = true;
        this.caches = [];
        this.destroy$ = this.teardownSubject.asObservable();
    }
    Plump.prototype.addType = function (T) {
        var _this = this;
        if (this.types[T.type] === undefined) {
            this.types[T.type] = T;
            return Promise.all(this.caches.map(function (s) { return s.addSchema(T); })).then(function () {
                if (_this.terminal) {
                    _this.terminal.addSchema(T);
                }
            });
        }
        else {
            return Promise.reject("Duplicate Type registered: " + T.type);
        }
    };
    Plump.prototype.type = function (T) {
        return this.types[T];
    };
    Plump.prototype.getTypes = function () {
        var _this = this;
        return Object.keys(this.types).map(function (t) { return _this.type(t); });
    };
    Plump.prototype.addCache = function (store) {
        var _this = this;
        this.caches.push(store);
        if (this.terminal !== undefined) {
            Plump.wire(store, this.terminal, this.destroy$);
        }
        return store.addSchemas(Object.keys(this.types).map(function (k) { return _this.types[k]; }));
    };
    Plump.prototype.find = function (ref) {
        var Type = this.types[ref.type];
        return new Type((_a = {}, _a[Type.schema.idAttribute] = ref.id, _a), this);
        var _a;
    };
    Plump.prototype.forge = function (t, val) {
        var Type = this.types[t];
        return new Type(val, this);
    };
    Plump.prototype.teardown = function () {
        this.teardownSubject.next('done');
    };
    Plump.prototype.get = function (value, opts) {
        var _this = this;
        if (opts === void 0) { opts = ['attributes']; }
        var keys = opts && !Array.isArray(opts) ? [opts] : opts;
        if (keys.indexOf('relationships') >= 0) {
            keys.splice(keys.indexOf('relationships'), 1);
            keys.unshift.apply(keys, Object.keys(this.types[value.type].schema.relationships).map(function (v) { return "relationships." + v; }));
        }
        return this.caches
            .reduce(function (thenable, storage) {
            return thenable.then(function (v) {
                if (v !== null) {
                    return v;
                }
                else if (storage.hot(value)) {
                    return storage.read(value, keys);
                }
                else {
                    return null;
                }
            });
        }, Promise.resolve(null))
            .then(function (v) {
            if (_this.terminal &&
                (v === null || !opts.every(function (path) { return pathExists(v, path); }))) {
                return _this.terminal.read(value, keys);
            }
            else {
                return v;
            }
        });
    };
    Plump.prototype.bulkGet = function (value) {
        return this.terminal.bulkRead(value);
    };
    Plump.prototype.forceCreate = function (value) {
        return this.save(value, { stripId: false });
    };
    Plump.prototype.save = function (value, options) {
        var _this = this;
        if (options === void 0) { options = { stripId: true }; }
        if (this.terminal) {
            return Promise.resolve()
                .then(function () {
                var attrs = Object.assign({}, value.attributes);
                if (options.stripId) {
                    var idAttribute = _this.types[value.type].schema
                        .idAttribute;
                    if (attrs[idAttribute]) {
                        delete attrs[idAttribute];
                    }
                }
                if (Object.keys(attrs).length > 0) {
                    return _this.terminal.writeAttributes({
                        attributes: value.attributes,
                        id: value.id,
                        type: value.type,
                    });
                }
                else {
                    return {
                        id: value.id,
                        type: value.type,
                    };
                }
            })
                .then(function (updated) {
                if (value.relationships &&
                    Object.keys(value.relationships).length > 0) {
                    return Promise.all(Object.keys(value.relationships).map(function (relName) {
                        return value.relationships[relName].reduce(function (thenable, delta) {
                            return thenable.then(function () {
                                if (delta.op === 'add') {
                                    return _this.terminal.writeRelationshipItem(updated, relName, delta.data);
                                }
                                else if (delta.op === 'remove') {
                                    return _this.terminal.deleteRelationshipItem(updated, relName, delta.data);
                                }
                                else if (delta.op === 'modify') {
                                    return _this.terminal.writeRelationshipItem(updated, relName, delta.data);
                                }
                                else {
                                    throw new Error("Unknown relationship delta " + JSON.stringify(delta));
                                }
                            });
                        }, Promise.resolve());
                    })).then(function () { return updated; });
                }
                else {
                    return updated;
                }
            });
        }
        else {
            return Promise.reject(new Error('Plump has no terminal store'));
        }
    };
    Plump.prototype.delete = function (item) {
        var _this = this;
        if (this.terminal) {
            return this.terminal
                .delete(item)
                .then(function () {
                return Promise.all(_this.caches.map(function (store) {
                    return store.wipe(item);
                }));
            })
                .then(function () {
            });
        }
        else {
            return Promise.reject(new Error('Plump has no terminal store'));
        }
    };
    Plump.prototype.add = function (item, relName, child) {
        if (this.terminal) {
            return this.terminal.writeRelationshipItem(item, relName, child);
        }
        else {
            return Promise.reject(new Error('Plump has no terminal store'));
        }
    };
    Plump.prototype.modifyRelationship = function (item, relName, child) {
        return this.add(item, relName, child);
    };
    Plump.prototype.query = function (type, q) {
        return this.terminal.query(type, q);
    };
    Plump.prototype.deleteRelationshipItem = function (item, relName, child) {
        if (this.terminal) {
            return this.terminal.deleteRelationshipItem(item, relName, child);
        }
        else {
            return Promise.reject(new Error('Plump has no terminal store'));
        }
    };
    Plump.prototype.invalidate = function (item, field) {
        var fields = Array.isArray(field) ? field : [field];
        this.terminal.fireWriteUpdate({
            type: item.type,
            id: item.id,
            invalidate: fields,
        });
    };
    Plump.wire = function (me, they, shutdownSignal) {
        if (me.terminal) {
            throw new Error('Cannot wire a terminal store into another store');
        }
        else {
            they.read$.takeUntil(shutdownSignal).subscribe(function (v) {
                me.cache(v);
            });
            they.write$.takeUntil(shutdownSignal).subscribe(function (v) {
                v.invalidate.forEach(function (invalid) {
                    me.wipe(v, invalid);
                });
            });
        }
    };
    return Plump;
}());
exports.Plump = Plump;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
