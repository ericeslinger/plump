"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Rx_1 = require("rxjs/Rx");
var Bluebird = require("bluebird");
var Plump = (function () {
    function Plump() {
        this.teardownSubject = new Rx_1.Subject();
        this.storage = [];
        this.types = {};
        this.destroy$ = this.teardownSubject.asObservable();
    }
    Plump.prototype.addType = function (T) {
        var _this = this;
        if (this.types[T.typeName] === undefined) {
            this.types[T.typeName] = T;
            return Bluebird.all(this.storage.map(function (s) { return s.addSchema(T); })).then(function () {
                if (_this.terminal) {
                    _this.terminal.addSchema(T);
                }
            });
        }
        else {
            return Bluebird.reject("Duplicate Type registered: " + T.typeName);
        }
    };
    Plump.prototype.type = function (T) {
        return this.types[T];
    };
    Plump.prototype.addStore = function (store) {
        var _this = this;
        if (store.terminal) {
            if (this.terminal !== undefined) {
                throw new Error('cannot have more than one terminal store');
            }
            else {
                this.terminal = store;
                this.storage.forEach(function (cacheStore) {
                    cacheStore.wire(store, _this.destroy$);
                });
            }
        }
        else {
            this.storage.push(store);
            if (this.terminal !== undefined) {
                store.wire(this.terminal, this.destroy$);
            }
        }
        return store.addSchemas(Object.keys(this.types).map(function (k) { return _this.types[k]; }));
    };
    Plump.prototype.find = function (t, id) {
        var Type = typeof t === 'string' ? this.types[t] : t;
        return new Type((_a = {}, _a[Type.schema.idAttribute] = id, _a), this);
        var _a;
    };
    Plump.prototype.forge = function (t, val) {
        var Type = typeof t === 'string' ? this.types[t] : t;
        return new Type(val, this);
    };
    Plump.prototype.teardown = function () {
        this.teardownSubject.next('done');
    };
    Plump.prototype.get = function (value, opts) {
        var _this = this;
        if (opts === void 0) { opts = ['attributes']; }
        var keys = opts && !Array.isArray(opts) ? [opts] : opts;
        return this.storage.reduce(function (thenable, storage) {
            return thenable.then(function (v) {
                if (v !== null) {
                    return v;
                }
                else if (storage.hot(value)) {
                    return storage.read(value, keys);
                }
                else {
                    return null;
                }
            });
        }, Bluebird.resolve(null))
            .then(function (v) {
            if (((v === null) || (v.attributes === null)) && (_this.terminal)) {
                return _this.terminal.read(value, keys);
            }
            else {
                return v;
            }
        });
    };
    // bulkGet(type, id) {
    //   return this.terminal.bulkRead(type, id);
    // }
    Plump.prototype.save = function (value) {
        var _this = this;
        if (this.terminal) {
            return Bluebird.resolve()
                .then(function () {
                if (Object.keys(value.attributes).length > 0) {
                    return _this.terminal.writeAttributes({
                        attributes: value.attributes,
                        id: value.id,
                        typeName: value.typeName,
                    });
                }
                else {
                    return {
                        id: value.id,
                        typeName: value.typeName,
                    };
                }
            })
                .then(function (updated) {
                if (value.relationships && Object.keys(value.relationships).length > 0) {
                    return Bluebird.all(Object.keys(value.relationships).map(function (relName) {
                        return Bluebird.all(value.relationships[relName].map(function (delta) {
                            if (delta.op === 'add') {
                                return _this.terminal.writeRelationshipItem(updated, relName, delta.data);
                            }
                            else if (delta.op === 'remove') {
                                return _this.terminal.deleteRelationshipItem(updated, relName, delta.data);
                            }
                            else if (delta.op === 'modify') {
                                return _this.terminal.writeRelationshipItem(updated, relName, delta.data);
                            }
                            else {
                                throw new Error("Unknown relationship delta " + JSON.stringify(delta));
                            }
                        }));
                    })).then(function () { return updated; });
                }
                else {
                    return updated;
                }
            });
        }
        else {
            return Bluebird.reject(new Error('Plump has no terminal store'));
        }
    };
    Plump.prototype.delete = function (item) {
        var _this = this;
        if (this.terminal) {
            return this.terminal.delete(item).then(function () {
                return Bluebird.all(_this.storage.map(function (store) {
                    return store.delete(item);
                }));
            });
        }
        else {
            return Bluebird.reject(new Error('Plump has no terminal store'));
        }
    };
    Plump.prototype.add = function (item, relName, child) {
        if (this.terminal) {
            return this.terminal.writeRelationshipItem(item, relName, child);
        }
        else {
            return Bluebird.reject(new Error('Plump has no terminal store'));
        }
    };
    // restRequest(opts) {
    //   if (this.terminal && this.terminal.rest) {
    //     return this.terminal.rest(opts);
    //   } else {
    //     return Bluebird.reject(new Error('No Rest terminal store'));
    //   }
    // }
    Plump.prototype.modifyRelationship = function (item, relName, child) {
        return this.add(item, relName, child);
    };
    Plump.prototype.deleteRelationshipItem = function (item, relName, child) {
        if (this.terminal) {
            return this.terminal.deleteRelationshipItem(item, relName, child);
        }
        else {
            return Bluebird.reject(new Error('Plump has no terminal store'));
        }
    };
    Plump.prototype.invalidate = function (item, field) {
        var fields = Array.isArray(field) ? field : [field];
        this.terminal.fireWriteUpdate({ typeName: item.typeName, id: item.id, invalidate: fields });
    };
    return Plump;
}());
exports.Plump = Plump;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
