import { Subject } from 'rxjs/Rx';
import * as Bluebird from 'bluebird';
var Plump = (function () {
    function Plump(opts) {
        if (opts === void 0) { opts = {}; }
        var _this = this;
        var options = Object.assign({}, {
            storage: [],
            types: [],
        }, opts);
        this.teardownSubject = new Subject();
        this.storage = [];
        this.types = {};
        this.destroy$ = this.teardownSubject.asObservable();
        options.storage.forEach(function (s) { return _this.addStore(s); });
        options.types.forEach(function (t) { return _this.addType(t); });
    }
    Plump.prototype.addType = function (T) {
        if (this.types[T.type] === undefined) {
            this.types[T.type] = T;
            this.storage.forEach(function (s) { return s.addType(T); });
            if (this.terminal) {
                this.terminal.addType(T);
            }
        }
        else {
            throw new Error("Duplicate Type registered: " + T.type);
        }
    };
    Plump.prototype.type = function (T) {
        return this.types[T];
    };
    Plump.prototype.addStore = function (store) {
        var _this = this;
        if (store.terminal) {
            if (this.terminal !== undefined) {
                throw new Error('cannot have more than one terminal store');
            }
            else {
                this.terminal = store;
                this.storage.forEach(function (cacheStore) {
                    cacheStore.wire(store, _this.destroy$);
                });
            }
        }
        else {
            this.storage.push(store);
            if (this.terminal !== undefined) {
                store.wire(this.terminal, this.destroy$);
            }
        }
        for (var typeName in this.types) {
            store.addType(this.types[typeName]);
        }
    };
    Plump.prototype.find = function (t, id) {
        var Type = typeof t === 'string' ? this.types[t] : t;
        return new Type((_a = {}, _a[Type.$id] = id, _a), this);
        var _a;
    };
    Plump.prototype.forge = function (t, val) {
        var Type = typeof t === 'string' ? this.types[t] : t;
        return new Type(val, this);
    };
    Plump.prototype.teardown = function () {
        this.teardownSubject.next('done');
    };
    Plump.prototype.get = function (value, opts) {
        var _this = this;
        if (opts === void 0) { opts = ['attributes']; }
        var keys = opts && !Array.isArray(opts) ? [opts] : opts;
        return this.storage.reduce(function (thenable, storage) {
            return thenable.then(function (v) {
                if (v !== null) {
                    return v;
                }
                else if (storage.hot(value)) {
                    return storage.read(value, keys);
                }
                else {
                    return null;
                }
            });
        }, Promise.resolve(null))
            .then(function (v) {
            if (((v === null) || (v.attributes === null)) && (_this.terminal)) {
                return _this.terminal.read(value, keys);
            }
            else {
                return v;
            }
        });
    };
    Plump.prototype.bulkGet = function (type, id) {
        return this.terminal.bulkRead(type, id);
    };
    Plump.prototype.save = function (value) {
        var _this = this;
        if (this.terminal) {
            return Bluebird.resolve()
                .then(function () {
                if (Object.keys(value.attributes).length > 0) {
                    return _this.terminal.writeAttributes(value);
                }
                else {
                    return null;
                }
            })
                .then(function (updated) {
                if (value.relationships && Object.keys(value.relationships).length > 0) {
                    return Bluebird.all(Object.keys(value.relationships).map(function (relName) {
                        return Bluebird.all(value.relationships[relName].map(function (delta) {
                            if (delta.op === 'add') {
                                return _this.terminal.writeRelationshipItem(value, relName, delta);
                            }
                            else if (delta.op === 'remove') {
                                return _this.terminal.deleteRelationshipItem(value, relName, delta);
                            }
                            else if (delta.op === 'modify') {
                                return _this.terminal.writeRelationshipItem(value, relName, delta);
                            }
                            else {
                                throw new Error("Unknown relationship delta " + JSON.stringify(delta));
                            }
                        }));
                    })).then(function () { return updated; });
                }
                else {
                    return updated;
                }
            });
        }
        else {
            return Promise.reject(new Error('Plump has no terminal store'));
        }
    };
    Plump.prototype.delete = function () {
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (this.terminal) {
            return (_a = this.terminal).delete.apply(_a, args).then(function () {
                return Bluebird.all(_this.storage.map(function (store) {
                    return store.delete.apply(store, args);
                }));
            });
        }
        else {
            return Promise.reject(new Error('Plump has no terminal store'));
        }
        var _a;
    };
    Plump.prototype.add = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (this.terminal) {
            return (_a = this.terminal).add.apply(_a, args);
        }
        else {
            return Promise.reject(new Error('Plump has no terminal store'));
        }
        var _a;
    };
    Plump.prototype.restRequest = function (opts) {
        if (this.terminal && this.terminal.rest) {
            return this.terminal.rest(opts);
        }
        else {
            return Promise.reject(new Error('No Rest terminal store'));
        }
    };
    Plump.prototype.modifyRelationship = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (this.terminal) {
            return (_a = this.terminal).modifyRelationship.apply(_a, args);
        }
        else {
            return Promise.reject(new Error('Plump has no terminal store'));
        }
        var _a;
    };
    Plump.prototype.remove = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (this.terminal) {
            return (_a = this.terminal).remove.apply(_a, args);
        }
        else {
            return Promise.reject(new Error('Plump has no terminal store'));
        }
        var _a;
    };
    Plump.prototype.invalidate = function (type, id, field) {
        var fields = Array.isArray(field) ? field : [field];
        this.terminal.fireWriteUpdate({ type: type, id: id, invalidate: fields });
    };
    return Plump;
}());
export { Plump };

//# sourceMappingURL=data:application/json;charset=utf8;base64,
