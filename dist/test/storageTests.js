/* eslint-env node */
/* eslint no-shadow: 0, max-len: 0 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../src/index");
var testType_1 = require("./testType");
var Bluebird = require("bluebird");
var mergeOptions = require("merge-options");
Bluebird.config({
    longStackTraces: true,
});
var chai = require("chai");
var chaiAsPromised = require("chai-as-promised");
chai.use(chaiAsPromised);
var expect = chai.expect;
var sampleObject = {
    typeName: 'tests',
    attributes: {
        name: 'potato',
        extended: {
            actual: 'rutabaga',
            otherValue: 42,
        },
    },
    relationships: {},
};
function testSuite(mocha, storeOpts) {
    var store = Object.assign({}, {
        before: function () { return Bluebird.resolve(); },
        after: function () { return Bluebird.resolve(); },
    }, storeOpts);
    mocha.describe(store.name, function () {
        var actualStore;
        mocha.before(function () {
            return (store.before || (function () { return Bluebird.resolve(); }))(actualStore)
                .then(function () {
                actualStore = new store.ctor(store.opts); // eslint-disable-line new-cap
                actualStore.addSchema(testType_1.TestType);
            });
        });
        mocha.describe('core CRUD', function () {
            mocha.it('supports creating values with no id field, and retrieving values', function () {
                return actualStore.writeAttributes(sampleObject)
                    .then(function (createdObject) {
                    return actualStore.read({ typeName: 'tests', id: createdObject.id }, ['attributes', 'relationships'])
                        .then(function (v) {
                        return expect(v)
                            .to.deep.equal(mergeOptions({}, sampleObject, {
                            id: createdObject.id,
                            relationships: {
                                parents: [],
                                children: [],
                                valenceParents: [],
                                valenceChildren: [],
                                queryParents: [],
                                queryChildren: [],
                            },
                            attributes: {
                                id: createdObject.id,
                                otherName: '',
                            },
                        }));
                    });
                });
            });
            mocha.it('allows objects to be stored by id', function () {
                return actualStore.writeAttributes(sampleObject)
                    .then(function (createdObject) {
                    var modObject = mergeOptions({}, createdObject, { attributes: { name: 'carrot' } });
                    return actualStore.writeAttributes(modObject)
                        .then(function (updatedObject) {
                        return expect(actualStore.read({ typeName: 'tests', id: updatedObject.id }, 'attributes'))
                            .to.eventually.deep.equal(mergeOptions({}, modObject, {
                            id: createdObject.id,
                            relationships: {},
                            attributes: {
                                id: createdObject.id,
                                otherName: '',
                            },
                        }));
                    });
                });
            });
            mocha.it('allows for deletion of objects by id', function () {
                return actualStore.writeAttributes(sampleObject)
                    .then(function (createdObject) {
                    return expect(actualStore.read({ typeName: 'tests', id: createdObject.id }))
                        .to.eventually.have.deep.property('attributes.name', 'potato')
                        .then(function () { return actualStore.delete({ typeName: 'tests', id: createdObject.id }); })
                        .then(function () { return expect(actualStore.read({ typeName: 'tests', id: createdObject.id })).to.eventually.be.null; });
                });
            });
        });
        mocha.describe('relationships', function () {
            mocha.it('can fetch a base and hasmany in one read', function () {
                return actualStore.writeAttributes(sampleObject)
                    .then(function (createdObject) {
                    return actualStore.writeRelationshipItem({ typeName: 'tests', id: createdObject.id }, 'children', { id: 200 })
                        .then(function () { return actualStore.writeRelationshipItem({ typeName: 'tests', id: createdObject.id }, 'children', { id: 201 }); })
                        .then(function () { return actualStore.writeRelationshipItem({ typeName: 'tests', id: createdObject.id }, 'children', { id: 202 }); })
                        .then(function () { return actualStore.writeRelationshipItem({ typeName: 'tests', id: createdObject.id }, 'children', { id: 203 }); })
                        .then(function () {
                        return actualStore.read({ typeName: 'tests', id: createdObject.id }, ['attributes', 'relationships.children']);
                    })
                        .then(function (v) {
                        expect(v).to.have.deep.property('attributes.name', 'potato');
                        expect(v.relationships.children).to.deep.equal([{ id: 200 }, { id: 201 }, { id: 202 }, { id: 203 }]);
                    });
                });
            });
            mocha.it('can add to a hasMany relationship', function () {
                return actualStore.writeAttributes(sampleObject)
                    .then(function (createdObject) {
                    return actualStore.writeRelationshipItem({ typeName: 'tests', id: createdObject.id }, 'children', { id: 100 })
                        .then(function () { return actualStore.writeRelationshipItem({ typeName: 'tests', id: createdObject.id }, 'children', { id: 101 }); })
                        .then(function () { return actualStore.writeRelationshipItem({ typeName: 'tests', id: createdObject.id }, 'children', { id: 102 }); })
                        .then(function () { return actualStore.writeRelationshipItem({ typeName: 'tests', id: createdObject.id }, 'children', { id: 103 }); })
                        .then(function () { return actualStore.writeRelationshipItem({ typeName: 'tests', id: 100 }, 'children', { id: createdObject.id }); })
                        .then(function () { return actualStore.read({ typeName: 'tests', id: createdObject.id }, ['relationships.children']); })
                        .then(function (v) {
                        expect(v.relationships.children).to.deep.equal([
                            { id: 100 },
                            { id: 101 },
                            { id: 102 },
                            { id: 103 },
                        ]);
                        return actualStore.read({ typeName: 'tests', id: createdObject.id }, ['relationships.parents']);
                    })
                        .then(function (v) { return expect(v.relationships.parents).to.deep.equal([{ id: 100 }]); });
                });
            });
            mocha.it('can add to a hasMany relationship with extras', function () {
                return actualStore.writeAttributes(sampleObject)
                    .then(function (createdObject) {
                    return actualStore.writeRelationshipItem({ typeName: 'tests', id: createdObject.id }, 'valenceChildren', { id: 100, meta: { perm: 1 } })
                        .then(function () { return actualStore.read({ typeName: 'tests', id: createdObject.id }, 'relationships.valenceChildren'); })
                        .then(function (v) { return expect(v.relationships.valenceChildren).to.deep.equal([{ id: 100, meta: { perm: 1 } }]); });
                });
            });
            mocha.it('can modify valence on a hasMany relationship', function () {
                return actualStore.writeAttributes(sampleObject)
                    .then(function (createdObject) {
                    return actualStore.writeRelationshipItem({ typeName: 'tests', id: createdObject.id }, 'valenceChildren', { id: 100, meta: { perm: 1 } })
                        .then(function () { return actualStore.read({ typeName: 'tests', id: createdObject.id }, 'relationships.valenceChildren'); })
                        .then(function (v) { return expect(v.relationships.valenceChildren).to.deep.equal([{ id: 100, meta: { perm: 1 } }]); })
                        .then(function () {
                        return actualStore.writeRelationshipItem({ typeName: 'tests', id: createdObject.id }, 'valenceChildren', { id: 100, meta: { perm: 2 } });
                    })
                        .then(function () { return actualStore.read({ typeName: 'tests', id: createdObject.id }, 'relationships.valenceChildren'); })
                        .then(function (v) { return expect(v.relationships.valenceChildren).to.deep.equal([{ id: 100, meta: { perm: 2 } }]); });
                });
            });
            mocha.it('can remove from a hasMany relationship', function () {
                return actualStore.writeAttributes(sampleObject)
                    .then(function (createdObject) {
                    return actualStore.writeRelationshipItem({ typeName: 'tests', id: createdObject.id }, 'children', { id: 100 })
                        .then(function () { return actualStore.read({ typeName: 'tests', id: createdObject.id }, 'relationships.children'); })
                        .then(function (v) { return expect(v.relationships.children).to.deep.equal([{ id: 100 }]); })
                        .then(function () { return actualStore.deleteRelationshipItem({ typeName: 'tests', id: createdObject.id }, 'children', { id: 100 }); })
                        .then(function () { return actualStore.read({ typeName: 'tests', id: createdObject.id }, 'relationships.children'); })
                        .then(function (v) { return expect(v.relationships.children).to.deep.equal([]); });
                });
            });
        });
        mocha.describe('events', function () {
            mocha.it('should pass basic write-invalidation events to other datastores', function () {
                var memstore = new index_1.MemoryStore();
                var testPlump = new index_1.Plump({
                    storage: [memstore, actualStore],
                    types: [testType_1.TestType],
                });
                return actualStore.writeAttributes({
                    typeName: 'tests',
                    attributes: { name: 'potato' },
                }).then(function (createdObject) {
                    return actualStore.read({ typeName: 'tests', id: createdObject.id })
                        .then(function () {
                        return new Bluebird(function (resolve) { return setTimeout(resolve, 100); })
                            .then(function () {
                            return expect(memstore.read({ typeName: 'tests', id: createdObject.id }))
                                .to.eventually.have.deep.property('attributes.name', 'potato');
                        }).then(function () {
                            return actualStore.writeAttributes({
                                typeName: 'tests',
                                id: createdObject.id,
                                attributes: {
                                    name: 'grotato',
                                },
                            });
                        }).then(function () {
                            return new Bluebird(function (resolve) { return setTimeout(resolve, 100); });
                        }).then(function () {
                            return expect(memstore.read({ typeName: 'tests', id: createdObject.id }))
                                .to.eventually.be.null;
                        });
                    });
                }).finally(function () {
                    return testPlump.teardown();
                });
            });
            mocha.it('should pass basic cacheable-read events up the stack', function () {
                var testPlump = new index_1.Plump({ types: [testType_1.TestType] });
                var testItem;
                var memstore;
                return actualStore.writeAttributes({
                    typeName: 'tests',
                    attributes: { name: 'potato' },
                }).then(function (createdObject) {
                    testItem = createdObject;
                    return expect(actualStore.read({ typeName: 'tests', id: testItem.id }))
                        .to.eventually.have.deep.property('attributes.name', 'potato');
                }).then(function () {
                    memstore = new index_1.MemoryStore();
                    testPlump.addStore(memstore);
                    testPlump.addStore(actualStore);
                    return expect(memstore.read({ typeName: 'tests', id: testItem.id })).to.eventually.be.null;
                }).then(function () {
                    return actualStore.read({ typeName: 'tests', id: testItem.id });
                })
                    .then(function () {
                    // NOTE: this timeout is a hack, it is because
                    // cacheable read events trigger multiple async things, but don't block
                    // the promise from returning
                    return new Bluebird(function (resolve) { return setTimeout(resolve, 100); });
                })
                    .then(function () {
                    return expect(memstore.read({ typeName: 'tests', id: testItem.id }))
                        .to.eventually.have.deep.property('attributes.name', 'potato');
                }).finally(function () { return testPlump.teardown(); });
            });
            mocha.it('should pass write-invalidation events on hasMany relationships to other datastores', function () {
                var testItem;
                var memstore = new index_1.MemoryStore();
                var testPlump = new index_1.Plump({
                    storage: [memstore, actualStore],
                    types: [testType_1.TestType],
                });
                return actualStore.writeAttributes({
                    typeName: 'tests',
                    attributes: { name: 'potato' },
                }).then(function (createdObject) {
                    testItem = createdObject;
                    return expect(actualStore.read({ typeName: 'tests', id: testItem.id }))
                        .to.eventually.have.deep.property('attributes.name', 'potato');
                }).then(function () { return actualStore.writeRelationshipItem({ typeName: 'tests', id: testItem.id }, 'children', { id: 100 }); })
                    .then(function () {
                    return expect(memstore.read({ typeName: 'tests', id: testItem.id }))
                        .to.eventually.not.have.deep.property('relationships.children');
                }).then(function () {
                    return actualStore.read({ typeName: 'tests', id: testItem.id }, 'children');
                }).then(function () {
                    // NOTE: this timeout is a hack, it is because
                    // cacheable read events trigger multiple async things, but don't block
                    // the promise from returning
                    return new Bluebird(function (resolve) { return setTimeout(resolve, 100); });
                })
                    .then(function () { return memstore.read({ typeName: 'tests', id: testItem.id }, 'children'); })
                    .then(function (v) { return expect(v.relationships.children).to.deep.equal([{ id: 100 }]); })
                    .then(function () { return actualStore.writeRelationshipItem({ typeName: 'tests', id: testItem.id }, 'children', { id: 101 }); })
                    .then(function () { return new Bluebird(function (resolve) { return setTimeout(resolve, 100); }); })
                    .then(function () { return memstore.read({ typeName: 'tests', id: testItem.id }); })
                    .then(function (v) { return expect(v).to.not.have.deep.property('relationships.children'); })
                    .finally(function () { return testPlump.teardown(); });
            });
            mocha.it('should pass cacheable-read events on hasMany relationships to other datastores', function () {
                var testPlump = new index_1.Plump({ types: [testType_1.TestType] });
                var testItem;
                var memstore;
                return actualStore.writeAttributes({
                    typeName: 'tests',
                    attributes: { name: 'potato' },
                }).then(function (createdObject) {
                    testItem = createdObject;
                    return expect(actualStore.read({ typeName: 'tests', id: testItem.id }))
                        .to.eventually.have.deep.property('attributes.name', 'potato');
                }).then(function () { return actualStore.writeRelationshipItem({ typeName: 'tests', id: testItem.id }, 'children', { id: 100 }); })
                    .then(function () {
                    memstore = new index_1.MemoryStore();
                    testPlump.addStore(actualStore);
                    testPlump.addStore(memstore);
                    return expect(memstore.read({ typeName: 'tests', id: testItem.id })).to.eventually.be.null;
                }).then(function () {
                    return actualStore.read({ typeName: 'tests', id: testItem.id }, 'children');
                }).then(function () { return new Bluebird(function (resolve) { return setTimeout(resolve, 100); }); })
                    .then(function () { return memstore.read({ typeName: 'tests', id: testItem.id }, 'children'); })
                    .then(function (v) { return expect(v.relationships.children).to.deep.equal([{ id: 100 }]); })
                    .finally(function () { return testPlump.teardown(); });
            });
        });
        mocha.after(function () {
            return (store.after || (function () { return; }))(actualStore);
        });
    });
}
exports.testSuite = testSuite;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
