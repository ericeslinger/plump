'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _memory = require('../storage/memory');

var _testType = require('./testType');

var _plump = require('../plump');

var _axios = require('axios');

var axios = _interopRequireWildcard(_axios);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _mergeOptions = require('merge-options');

var _mergeOptions2 = _interopRequireDefault(_mergeOptions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// STUB
_memory.MemoryStorage.prototype.bulkRead = function bulkRead(root, opts) {
  var _this = this;

  // eslint-disable-line no-unused-vars
  return _bluebird2.default.all(Object.keys(_testType.TestType.$include).map(function (relationship) {
    return _this.read(_testType.TestType, root.$id, relationship);
  })).then(function (valueArray) {
    return valueArray.reduce(function (acc, curr) {
      return (0, _mergeOptions2.default)(acc, curr);
    }, {});
  });
};

var backingStore = new _memory.MemoryStorage({ terminal: true });
backingStore.terminal = true;

function mockup(T) {
  var plump = new _plump.Plump({ storage: [backingStore], types: [T] });
  var mockedAxios = axios.create({ baseURL: '' });
  mockedAxios.defaults.adapter = function (config) {
    return _bluebird2.default.resolve().then(function () {
      var matchBase = config.url.match(new RegExp('^/' + T.$name + '$'));
      var matchItem = config.url.match(new RegExp('^/' + T.$name + '/(\\d+)$'));
      var matchSideBase = config.url.match(new RegExp('^/' + T.$name + '/(\\d+)/(\\w+)$'));
      var matchSideItem = config.url.match(new RegExp('^/' + T.$name + '/(\\d+)/(\\w+)/(\\d+)$'));

      if (config.method === 'get') {
        if (matchBase) {
          return backingStore.query();
        } else if (matchItem) {
          return plump.get(T, parseInt(matchItem[1], 10));
        } else if (matchSideBase) {
          return plump.get(T, parseInt(matchSideBase[1], 10), matchSideBase[2]);
        }
      } else if (config.method === 'post') {
        if (matchBase) {
          return plump.save(T, JSON.parse(config.data));
        }
      } else if (config.method === 'patch') {
        if (matchItem) {
          return plump.save(T, Object.assign({}, JSON.parse(config.data), _defineProperty({}, T.$id, parseInt(matchItem[1], 10))));
        } else if (matchSideItem) {
          return plump.modifyRelationship(T, parseInt(matchSideItem[1], 10), matchSideItem[2], parseInt(matchSideItem[3], 10), JSON.parse(config.data));
        }
      } else if (config.method === 'put') {
        if (matchSideBase) {
          var relationshipBlock = T.$fields[matchSideBase[2]];
          var sideInfo = relationshipBlock.relationship.$sides[matchSideBase[2]];
          return plump.add(T, parseInt(matchSideBase[1], 10), matchSideBase[2], JSON.parse(config.data)[sideInfo.other.field], JSON.parse(config.data));
        }
      } else if (config.method === 'delete') {
        if (matchItem) {
          return plump.delete(T, parseInt(matchItem[1], 10));
        } else if (matchSideItem) {
          return plump.remove(T, parseInt(matchSideItem[1], 10), matchSideItem[2], parseInt(matchSideItem[3], 10));
        }
      }
      return _bluebird2.default.reject({ response: { status: 400 } });
    }).then(function (d) {
      // console.log('FOR');
      // console.log(config);
      // console.log(`RESOLVING ${JSON.stringify(d, null, 2)}`);
      if (d) {
        return {
          data: d[T.$id] ? plump.forge(T, d).$package() : { response: { status: 200 } }
        };
      } else {
        return _bluebird2.default.reject({ response: { status: 404 } });
      }
    });
  };
  return mockedAxios;
}

var axiosMock = {
  mockup: mockup
};

exports.default = axiosMock;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvYXhpb3NNb2NraW5nLmpzIl0sIm5hbWVzIjpbImF4aW9zIiwicHJvdG90eXBlIiwiYnVsa1JlYWQiLCJyb290Iiwib3B0cyIsImFsbCIsIk9iamVjdCIsImtleXMiLCIkaW5jbHVkZSIsIm1hcCIsInJlYWQiLCIkaWQiLCJyZWxhdGlvbnNoaXAiLCJ0aGVuIiwidmFsdWVBcnJheSIsInJlZHVjZSIsImFjYyIsImN1cnIiLCJiYWNraW5nU3RvcmUiLCJ0ZXJtaW5hbCIsIm1vY2t1cCIsIlQiLCJwbHVtcCIsInN0b3JhZ2UiLCJ0eXBlcyIsIm1vY2tlZEF4aW9zIiwiY3JlYXRlIiwiYmFzZVVSTCIsImRlZmF1bHRzIiwiYWRhcHRlciIsImNvbmZpZyIsInJlc29sdmUiLCJtYXRjaEJhc2UiLCJ1cmwiLCJtYXRjaCIsIlJlZ0V4cCIsIiRuYW1lIiwibWF0Y2hJdGVtIiwibWF0Y2hTaWRlQmFzZSIsIm1hdGNoU2lkZUl0ZW0iLCJtZXRob2QiLCJxdWVyeSIsImdldCIsInBhcnNlSW50Iiwic2F2ZSIsIkpTT04iLCJwYXJzZSIsImRhdGEiLCJhc3NpZ24iLCJtb2RpZnlSZWxhdGlvbnNoaXAiLCJyZWxhdGlvbnNoaXBCbG9jayIsIiRmaWVsZHMiLCJzaWRlSW5mbyIsIiRzaWRlcyIsImFkZCIsIm90aGVyIiwiZmllbGQiLCJkZWxldGUiLCJyZW1vdmUiLCJyZWplY3QiLCJyZXNwb25zZSIsInN0YXR1cyIsImQiLCJmb3JnZSIsIiRwYWNrYWdlIiwiYXhpb3NNb2NrIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7SUFBWUEsSzs7QUFDWjs7OztBQUNBOzs7Ozs7Ozs7O0FBRUE7QUFDQSxzQkFBY0MsU0FBZCxDQUF3QkMsUUFBeEIsR0FBbUMsU0FBU0EsUUFBVCxDQUFrQkMsSUFBbEIsRUFBd0JDLElBQXhCLEVBQThCO0FBQUE7O0FBQUU7QUFDakUsU0FBTyxtQkFBUUMsR0FBUixDQUNMQyxPQUFPQyxJQUFQLENBQVksbUJB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RUFBMkIsRUFBM0IsQ0FGSyxFQUdMQSxjQUFjLENBQWQsQ0FISyxFQUlMSSxTQUFTSixjQUFjLENBQWQsQ0FBVCxFQUEyQixFQUEzQixDQUpLLENBQVA7QUFNRDtBQUNGO0FBQ0QsYUFBTyxtQkFBUW9CLE1BQVIsQ0FBZSxFQUFFQyxVQUFVLEVBQUVDLFFBQVEsR0FBVixFQUFaLEVBQWYsQ0FBUDtBQUNELEtBL0RNLEVBK0RKaEQsSUEvREksQ0ErREMsVUFBQ2lELENBQUQsRUFBTztBQUNiO0FBQ0E7QUFDQTtBQUNBLFVBQUlBLENBQUosRUFBTztBQUNMLGVBQU87QUFDTGYsZ0JBQU1lLEVBQUV6QyxFQUFFVixHQUFKLElBQ0ZXLE1BQU15QyxLQUFOLENBQVkxQyxDQUFaLEVBQWV5QyxDQUFmLEVBQWtCRSxRQUFsQixFQURFLEdBRUYsRUFBRUosVUFBVSxFQUFFQyxRQUFRLEdBQVYsRUFBWjtBQUhDLFNBQVA7QUFLRCxPQU5ELE1BTU87QUFDTCxlQUFPLG1CQUFRRixNQUFSLENBQWUsRUFBRUMsVUFBVSxFQUFFQyxRQUFRLEdBQVYsRUFBWixFQUFmLENBQVA7QUFDRDtBQUNGLEtBNUVNLENBQVA7QUE2RUQsR0E5RUQ7QUErRUEsU0FBT3BDLFdBQVA7QUFDRDs7QUFFRCxJQUFNd0MsWUFBWTtBQUNoQjdDO0FBRGdCLENBQWxCOztrQkFJZTZDLFMiLCJmaWxlIjoidGVzdC9heGlvc01vY2tpbmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNZW1vcnlTdG9yYWdlIH0gZnJvbSAnLi4vc3RvcmFnZS9tZW1vcnknO1xuaW1wb3J0IHsgVGVzdFR5cGUgfSBmcm9tICcuL3Rlc3RUeXBlJztcbmltcG9ydCB7IFBsdW1wIH0gZnJvbSAnLi4vcGx1bXAnO1xuaW1wb3J0ICogYXMgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IFByb21pc2UgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IG1lcmdlT3B0aW9ucyBmcm9tICdtZXJnZS1vcHRpb25zJztcblxuLy8gU1RVQlxuTWVtb3J5U3RvcmFnZS5wcm90b3R5cGUuYnVsa1JlYWQgPSBmdW5jdGlvbiBidWxrUmVhZChyb290LCBvcHRzKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgcmV0dXJuIFByb21pc2UuYWxsKFxuICAgIE9iamVjdC5rZXlzKFRlc3RUeXBlLiRpbmNsdWRlKVxuICAgIC5tYXAocmVsYXRpb25zaGlwID0+IHtcbiAgICAgIHJldHVybiB0aGlzLnJlYWQoVGVzdFR5cGUsIHJvb3QuJGlkLCByZWxhdGlvbnNoaXApO1xuICAgIH0pXG4gICkudGhlbih2YWx1ZUFycmF5ID0+IHtcbiAgICByZXR1cm4gdmFsdWVBcnJheS5yZWR1Y2UoKGFjYywgY3VycikgPT4gbWVyZ2VPcHRpb25zKGFjYywgY3VyciksIHt9KTtcbiAgfSk7XG59O1xuXG5jb25zdCBiYWNraW5nU3RvcmUgPSBuZXcgTWVtb3J5U3RvcmFnZSh7IHRlcm1pbmFsOiB0cnVlIH0pO1xuYmFja2luZ1N0b3JlLnRlcm1pbmFsID0gdHJ1ZTtcblxuZnVuY3Rpb24gbW9ja3VwKFQpIHtcbiAgY29uc3QgcGx1bXAgPSBuZXcgUGx1bXAoeyBzdG9yYWdlOiBbYmFja2luZ1N0b3JlXSwgdHlwZXM6IFtUXSB9KTtcbiAgY29uc3QgbW9ja2VkQXhpb3MgPSBheGlvcy5jcmVhdGUoeyBiYXNlVVJMOiAnJyB9KTtcbiAgbW9ja2VkQXhpb3MuZGVmYXVsdHMuYWRhcHRlciA9IChjb25maWcpID0+IHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB7XG4gICAgICBjb25zdCBtYXRjaEJhc2UgPSBjb25maWcudXJsLm1hdGNoKG5ldyBSZWdFeHAoYF4vJHtULiRuYW1lfSRgKSk7XG4gICAgICBjb25zdCBtYXRjaEl0ZW0gPSBjb25maWcudXJsLm1hdGNoKG5ldyBSZWdFeHAoYF4vJHtULiRuYW1lfS8oXFxcXGQrKSRgKSk7XG4gICAgICBjb25zdCBtYXRjaFNpZGVCYXNlID0gY29uZmlnLnVybC5tYXRjaChuZXcgUmVnRXhwKGBeLyR7VC4kbmFtZX0vKFxcXFxkKykvKFxcXFx3KykkYCkpO1xuICAgICAgY29uc3QgbWF0Y2hTaWRlSXRlbSA9IGNvbmZpZy51cmwubWF0Y2gobmV3IFJlZ0V4cChgXi8ke1QuJG5hbWV9LyhcXFxcZCspLyhcXFxcdyspLyhcXFxcZCspJGApKTtcblxuXG4gICAgICBpZiAoY29uZmlnLm1ldGhvZCA9PT0gJ2dldCcpIHtcbiAgICAgICAgaWYgKG1hdGNoQmFzZSkge1xuICAgICAgICAgIHJldHVybiBiYWNraW5nU3RvcmUucXVlcnkoKTtcbiAgICAgICAgfSBlbHNlIGlmIChtYXRjaEl0ZW0pIHtcbiAgICAgICAgICByZXR1cm4gcGx1bXAuZ2V0KFQsIHBhcnNlSW50KG1hdGNoSXRlbVsxXSwgMTApKTtcbiAgICAgICAgfSBlbHNlIGlmIChtYXRjaFNpZGVCYXNlKSB7XG4gICAgICAgICAgcmV0dXJuIHBsdW1wLmdldChULCBwYXJzZUludChtYXRjaFNpZGVCYXNlWzFdLCAxMCksIG1hdGNoU2lkZUJhc2VbMl0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNvbmZpZy5tZXRob2QgPT09ICdwb3N0Jykge1xuICAgICAgICBpZiAobWF0Y2hCYXNlKSB7XG4gICAgICAgICAgcmV0dXJuIHBsdW1wLnNhdmUoVCwgSlNPTi5wYXJzZShjb25maWcuZGF0YSkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNvbmZpZy5tZXRob2QgPT09ICdwYXRjaCcpIHtcbiAgICAgICAgaWYgKG1hdGNoSXRlbSkge1xuICAgICAgICAgIHJldHVybiBwbHVtcC5zYXZlKFxuICAgICAgICAgICAgVCxcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAgICBKU09OLnBhcnNlKGNvbmZpZy5kYXRhKSxcbiAgICAgICAgICAgICAgeyBbVC4kaWRdOiBwYXJzZUludChtYXRjaEl0ZW1bMV0sIDEwKSB9XG4gICAgICAgICAgICApXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChtYXRjaFNpZGVJdGVtKSB7XG4gICAgICAgICAgcmV0dXJuIHBsdW1wLm1vZGlmeVJlbGF0aW9uc2hpcChcbiAgICAgICAgICAgIFQsXG4gICAgICAgICAgICBwYXJzZUludChtYXRjaFNpZGVJdGVtWzFdLCAxMCksXG4gICAgICAgICAgICBtYXRjaFNpZGVJdGVtWzJdLFxuICAgICAgICAgICAgcGFyc2VJbnQobWF0Y2hTaWRlSXRlbVszXSwgMTApLFxuICAgICAgICAgICAgSlNPTi5wYXJzZShjb25maWcuZGF0YSlcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNvbmZpZy5tZXRob2QgPT09ICdwdXQnKSB7XG4gICAgICAgIGlmIChtYXRjaFNpZGVCYXNlKSB7XG4gICAgICAgICAgY29uc3QgcmVsYXRpb25zaGlwQmxvY2sgPSBULiRmaWVsZHNbbWF0Y2hTaWRlQmFzZVsyXV07XG4gICAgICAgICAgY29uc3Qgc2lkZUluZm8gPSByZWxhdGlvbnNoaXBCbG9jay5yZWxhdGlvbnNoaXAuJHNpZGVzW21hdGNoU2lkZUJhc2VbMl1dO1xuICAgICAgICAgIHJldHVybiBwbHVtcC5hZGQoXG4gICAgICAgICAgICBULFxuICAgICAgICAgICAgcGFyc2VJbnQobWF0Y2hTaWRlQmFzZVsxXSwgMTApLFxuICAgICAgICAgICAgbWF0Y2hTaWRlQmFzZVsyXSxcbiAgICAgICAgICAgIEpTT04ucGFyc2UoY29uZmlnLmRhdGEpW3NpZGVJbmZvLm90aGVyLmZpZWxkXSxcbiAgICAgICAgICAgIEpTT04ucGFyc2UoY29uZmlnLmRhdGEpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjb25maWcubWV0aG9kID09PSAnZGVsZXRlJykge1xuICAgICAgICBpZiAobWF0Y2hJdGVtKSB7XG4gICAgICAgICAgcmV0dXJuIHBsdW1wLmRlbGV0ZShULCBwYXJzZUludChtYXRjaEl0ZW1bMV0sIDEwKSk7XG4gICAgICAgIH0gZWxzZSBpZiAobWF0Y2hTaWRlSXRlbSkge1xuICAgICAgICAgIHJldHVybiBwbHVtcC5yZW1vdmUoXG4gICAgICAgICAgICBULFxuICAgICAgICAgICAgcGFyc2VJbnQobWF0Y2hTaWRlSXRlbVsxXSwgMTApLFxuICAgICAgICAgICAgbWF0Y2hTaWRlSXRlbVsyXSxcbiAgICAgICAgICAgIHBhcnNlSW50KG1hdGNoU2lkZUl0ZW1bM10sIDEwKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCh7IHJlc3BvbnNlOiB7IHN0YXR1czogNDAwIH0gfSk7XG4gICAgfSkudGhlbigoZCkgPT4ge1xuICAgICAgLy8gY29uc29sZS5sb2coJ0ZPUicpO1xuICAgICAgLy8gY29uc29sZS5sb2coY29uZmlnKTtcbiAgICAgIC8vIGNvbnNvbGUubG9nKGBSRVNPTFZJTkcgJHtKU09OLnN0cmluZ2lmeShkLCBudWxsLCAyKX1gKTtcbiAgICAgIGlmIChkKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGF0YTogZFtULiRpZF1cbiAgICAgICAgICAgID8gcGx1bXAuZm9yZ2UoVCwgZCkuJHBhY2thZ2UoKVxuICAgICAgICAgICAgOiB7IHJlc3BvbnNlOiB7IHN0YXR1czogMjAwIH0gfSxcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCh7IHJlc3BvbnNlOiB7IHN0YXR1czogNDA0IH0gfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG4gIHJldHVybiBtb2NrZWRBeGlvcztcbn1cblxuY29uc3QgYXhpb3NNb2NrID0ge1xuICBtb2NrdXAsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBheGlvc01vY2s7XG4iXX0=
