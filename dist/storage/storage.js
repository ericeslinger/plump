"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var mergeOptions = require("merge-options");
var rxjs_1 = require("rxjs");
var Storage = (function () {
    function Storage(opts) {
        if (opts === void 0) { opts = {}; }
        this.inProgress = {};
        this.types = {};
        this.readSubject = new rxjs_1.Subject();
        this.writeSubject = new rxjs_1.Subject();
        this.terminal = opts.terminal || false;
        this.read$ = this.readSubject.asObservable();
        this.write$ = this.writeSubject.asObservable();
    }
    Storage.prototype.readRelationships = function (item, relationships) {
        var _this = this;
        return Promise.all(relationships.map(function (r) { return _this.readRelationship(item, r); })).then(function (rA) {
            return rA.reduce(function (a, r) { return mergeOptions(a, r || {}); }, {
                type: item.type,
                id: item.id,
                attributes: {},
                relationships: {},
            });
        });
    };
    Storage.prototype.read = function (item, opts, force) {
        var _this = this;
        if (opts === void 0) { opts = ['attributes']; }
        if (force === void 0) { force = false; }
        var keys = (opts && !Array.isArray(opts) ? [opts] : opts);
        var reqKey = item.type + ":" + item.id + " - " + keys.join('.');
        if (force) {
            return this._read(item, opts);
        }
        else {
            if (this.inProgress[reqKey] === undefined ||
                this.inProgress[reqKey] === null) {
                this.inProgress[reqKey] = this._read(item, opts).then(function (result) {
                    _this.inProgress[reqKey] = null;
                    return result;
                });
            }
            return this.inProgress[reqKey];
        }
    };
    Storage.prototype._read = function (item, opts) {
        var _this = this;
        if (opts === void 0) { opts = ['attributes']; }
        var schema = this.getSchema(item.type);
        var keys = (opts && !Array.isArray(opts) ? [opts] : opts);
        return this.readAttributes(item)
            .then(function (attributes) {
            if (!attributes) {
                return null;
            }
            else {
                if (attributes.id &&
                    attributes.attributes &&
                    !attributes.attributes[schema.idAttribute]) {
                    attributes.attributes[schema.idAttribute] = attributes.id;
                }
                if (attributes.attributes) {
                    for (var attrName in schema.attributes) {
                        if (!attributes.attributes[attrName] &&
                            schema.attributes[attrName].default !== undefined) {
                            if (Array.isArray(schema.attributes[attrName].default)) {
                                attributes.attributes[attrName] = schema.attributes[attrName]
                                    .default.concat();
                            }
                            else if (typeof schema.attributes[attrName].default === 'object') {
                                attributes.attributes[attrName] = Object.assign({}, schema.attributes[attrName].default);
                            }
                            else {
                                attributes.attributes[attrName] =
                                    schema.attributes[attrName].default;
                            }
                        }
                    }
                }
                var relsWanted = keys.indexOf('relationships') >= 0
                    ? Object.keys(schema.relationships)
                    : keys
                        .map(function (k) { return k.split('.'); })
                        .filter(function (ka) { return ka[0] === 'relationships'; })
                        .map(function (ka) { return ka[1]; });
                var relsToFetch = relsWanted.filter(function (relName) { return !attributes.relationships[relName]; });
                if (relsToFetch.length > 0) {
                    return _this.readRelationships(item, relsToFetch).then(function (rels) {
                        return mergeOptions(attributes, rels);
                    });
                }
                else {
                    return attributes;
                }
            }
        })
            .then(function (result) {
            if (result) {
                Object.keys(result.relationships).forEach(function (relName) {
                    result.relationships[relName].forEach(function (relItem) {
                        relItem.type = _this.getSchema(result.type).relationships[relName].type.sides[relName].otherType;
                    });
                });
                _this.fireReadUpdate(result);
            }
            return result;
        });
    };
    Storage.prototype.bulkRead = function (item) {
        return this.read(item).then(function (data) {
            if (data.included === undefined) {
                data.included = [];
            }
            return data;
        });
    };
    Storage.prototype.hot = function (item) {
        return false;
    };
    Storage.prototype.validateInput = function (value) {
        var schema = this.getSchema(value.type);
        var retVal = {
            type: value.type,
            id: value.id,
            attributes: {},
            relationships: {},
        };
        var typeAttrs = Object.keys(schema.attributes || {});
        var valAttrs = Object.keys(value.attributes || {});
        var typeRels = Object.keys(schema.relationships || {});
        var valRels = Object.keys(value.relationships || {});
        var idAttribute = schema.idAttribute;
        var invalidAttrs = valAttrs.filter(function (item) { return typeAttrs.indexOf(item) < 0; });
        var invalidRels = valRels.filter(function (item) { return typeRels.indexOf(item) < 0; });
        if (invalidAttrs.length > 0) {
            throw new Error("Invalid attributes on value object: " + JSON.stringify(invalidAttrs));
        }
        if (invalidRels.length > 0) {
            throw new Error("Invalid relationships on value object: " + JSON.stringify(invalidRels));
        }
        if (value.attributes[idAttribute] && !retVal.id) {
            retVal.id = value.attributes[idAttribute];
        }
        for (var relName in schema.relationships) {
            if (value.relationships &&
                value.relationships[relName] &&
                !Array.isArray(value.relationships[relName])) {
                throw new Error("relation " + relName + " is not an array");
            }
        }
        return mergeOptions({}, value, retVal);
    };
    Storage.prototype.getSchema = function (t) {
        if (typeof t === 'string') {
            return this.types[t];
        }
        else if (t['schema']) {
            return t.schema;
        }
        else {
            return t;
        }
    };
    Storage.prototype.addSchema = function (t) {
        this.types[t.type] = t.schema;
        return Promise.resolve();
    };
    Storage.prototype.addSchemas = function (a) {
        var _this = this;
        return Promise.all(a.map(function (t) { return _this.addSchema(t); })).then(function () {
        });
    };
    Storage.prototype.fireWriteUpdate = function (val) {
        this.writeSubject.next(val);
        return Promise.resolve(val);
    };
    Storage.prototype.fireReadUpdate = function (val) {
        this.readSubject.next(val);
        return Promise.resolve(val);
    };
    return Storage;
}());
exports.Storage = Storage;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zdG9yYWdlL3N0b3JhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSw0Q0FBOEM7QUFFOUMsNkJBQTJDO0FBdUIzQztJQVlFLGlCQUFZLElBQXlCO1FBQXpCLHFCQUFBLEVBQUEsU0FBeUI7UUFSckMsZUFBVSxHQUVOLEVBQUUsQ0FBQztRQUNBLFVBQUssR0FBb0MsRUFBRSxDQUFDO1FBQzNDLGdCQUFXLEdBQUcsSUFBSSxjQUFPLEVBQWEsQ0FBQztRQUN2QyxpQkFBWSxHQUFHLElBQUksY0FBTyxFQUFjLENBQUM7UUFZL0MsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxJQUFJLEtBQUssQ0FBQztRQUN2QyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDN0MsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ2pELENBQUM7SUF3QkQsbUNBQWlCLEdBQWpCLFVBQWtCLElBQW9CLEVBQUUsYUFBdUI7UUFBL0QsaUJBV0M7UUFWQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FDaEIsYUFBYSxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLEtBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQTlCLENBQThCLENBQUMsQ0FDdkQsQ0FBQyxJQUFJLENBQUMsVUFBQSxFQUFFO1lBQ1AsT0FBQSxFQUFFLENBQUMsTUFBTSxDQUFDLFVBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSyxPQUFBLFlBQVksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUF4QixDQUF3QixFQUFFO2dCQUM1QyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7Z0JBQ2YsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFO2dCQUNYLFVBQVUsRUFBRSxFQUFFO2dCQUNkLGFBQWEsRUFB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LENBQUMsQ0FBQyxJQUFJLENBQUM7UUFFdkQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsaUNBQWUsR0FBZixVQUFnQixHQUFlO1FBQzdCLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzVCLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFRCxnQ0FBYyxHQUFkLFVBQWUsR0FBYztRQUMzQixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMzQixNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBQ0gsY0FBQztBQUFELENBeFFBLEFBd1FDLElBQUE7QUF4UXFCLDBCQUFPIiwiZmlsZSI6InN0b3JhZ2Uvc3RvcmFnZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludCBuby11bnVzZWQtdmFyczogMCAqL1xuXG5pbXBvcnQgKiBhcyBtZXJnZU9wdGlvbnMgZnJvbSAnbWVyZ2Utb3B0aW9ucyc7XG4vLyBpbXBvcnQgeyB2YWxpZGF0ZUlucHV0IH0gZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQgeyBTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBQbHVtcEVycm9yLCBOb3RGb3VuZEVycm9yIH0gZnJvbSAnLi4vZXJyb3JzJztcbmltcG9ydCB7XG4gIEluZGVmaW5pdGVNb2RlbERhdGEsXG4gIE1vZGVsRGF0YSxcbiAgTW9kZWxEZWx0YSxcbiAgTW9kZWxTY2hlbWEsXG4gIE1vZGVsUmVmZXJlbmNlLFxuICBCYXNlU3RvcmUsXG4gIFN0b3JhZ2VPcHRpb25zLFxuICAvLyBSZWxhdGlvbnNoaXBJdGVtLFxufSBmcm9tICcuLi9kYXRhVHlwZXMnO1xuXG4vLyB0eXBlOiBhbiBvYmplY3QgdGhhdCBkZWZpbmVzIHRoZSB0eXBlLiB0eXBpY2FsbHkgdGhpcyB3aWxsIGJlXG4vLyBwYXJ0IG9mIHRoZSBNb2RlbCBjbGFzcyBoaWVyYXJjaHksIGJ1dCBTdG9yYWdlIG9iamVjdHMgY2FsbCBubyBtZXRob2RzXG4vLyBvbiB0aGUgdHlwZSBvYmplY3QuIFdlIG9ubHkgYXJlIGludGVyZXN0ZWQgaW4gVHlwZS4kbmFtZSwgVHlwZS4kaWQgYW5kIFR5cGUuJHNjaGVtYS5cbi8vIE5vdGUgdGhhdCBUeXBlLiRpZCBpcyB0aGUgKm5hbWUgb2YgdGhlIGlkIGZpZWxkKiBvbiBpbnN0YW5jZXNcbi8vICAgIGFuZCBOT1QgdGhlIGFjdHVhbCBpZCBmaWVsZCAoZS5nLiwgaW4gbW9zdCBjYXNlcywgVHlwZS4kaWQgPT09ICdpZCcpLlxuLy8gaWQ6IHVuaXF1ZSBpZC4gT2Z0ZW4gYW4gaW50ZWdlciwgYnV0IG5vdCBuZWNlc3NhcnkgKGNvdWxkIGJlIGFuIG9pZClcblxuLy8gaGFzTWFueSByZWxhdGlvbnNoaXBzIGFyZSB0cmVhdGVkIGxpa2UgaWQgYXJyYXlzLiBTbywgYWRkIC8gcmVtb3ZlIC8gaGFzXG4vLyBqdXN0IHN0b3JlcyBhbmQgcmVtb3ZlcyBpbnRlZ2Vycy5cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFN0b3JhZ2UgaW1wbGVtZW50cyBCYXNlU3RvcmUge1xuICB0ZXJtaW5hbDogYm9vbGVhbjtcbiAgcmVhZCQ6IE9ic2VydmFibGU8TW9kZWxEYXRhPjtcbiAgd3JpdGUkOiBPYnNlcnZhYmxlPE1vZGVsRGVsdGE+O1xuICBpblByb2dyZXNzOiB7XG4gICAgW2tleTogc3RyaW5nXTogUHJvbWlzZTxNb2RlbERhdGE+O1xuICB9ID0ge307XG4gIHB1YmxpYyB0eXBlczogeyBbdHlwZTogc3RyaW5nXTogTW9kZWxTY2hlbWEgfSA9IHt9O1xuICBwcml2YXRlIHJlYWRTdWJqZWN0ID0gbmV3IFN1YmplY3Q8TW9kZWxEYXRhPigpO1xuICBwcml2YXRlIHdyaXRlU3ViamVjdCA9IG5ldyBTdWJqZWN0PE1vZGVsRGVsdGE+KCk7XG4gIC8vIHByb3RlY3RlZCB0eXBlczogTW9kZWxbXTsgVE9ETzogZmlndXJlIHRoaXMgb3V0XG5cbiAgY29uc3RydWN0b3Iob3B0czogU3RvcmFnZU9wdGlvbnMgPSB7fSkge1xuICAgIC8vIGEgXCJ0ZXJtaW5hbFwiIHN0b3JhZ2UgZmFjaWxpdHkgaXMgdGhlIGVuZCBvZiB0aGUgc3RvcmFnZSBjaGFpbi5cbiAgICAvLyB1c3VhbGx5IHNxbCBvbiB0aGUgc2VydmVyIHNpZGUgYW5kIHJlc3Qgb24gdGhlIGNsaWVudCBzaWRlLCBpdCAqbXVzdCpcbiAgICAvLyByZWNlaXZlIHRoZSB3cml0ZXMsIGFuZCBpcyB0aGUgZmluYWwgYXV0aG9yaXRhdGl2ZSBhbnN3ZXIgb24gd2hldGhlclxuICAgIC8vIHNvbWV0aGluZyBpcyA0MDQuXG5cbiAgICAvLyB0ZXJtaW5hbCBmYWNpbGl0aWVzIGFyZSBhbHNvIHRoZSBvbmx5IG9uZXMgdGhhdCBjYW4gYXV0aG9yaXRhdGl2ZWx5IGFuc3dlclxuICAgIC8vIGF1dGhvcml6YXRpb24gcXVlc3Rpb25zLCBidXQgdGhlIGRlc2lnbiBtYXkgYWxsb3cgZm9yIGF1dGhvcml6YXRpb24gdG8gYmVcbiAgICAvLyBjYWNoZWQuXG4gICAgdGhpcy50ZXJtaW5hbCA9IG9wdHMudGVybWluYWwgfHwgZmFsc2U7XG4gICAgdGhpcy5yZWFkJCA9IHRoaXMucmVhZFN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG4gICAgdGhpcy53cml0ZSQgPSB0aGlzLndyaXRlU3ViamVjdC5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIC8vIEFic3RyYWN0IC0gYWxsIHN0b3JlcyBtdXN0IHByb3ZpZGUgYmVsb3c6XG5cbiAgLy8gYWJzdHJhY3QgYWxsb2NhdGVJZCh0eXBlOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZyB8IG51bWJlcj47XG4gIC8vIGFic3RyYWN0IHdyaXRlQXR0cmlidXRlcyh2YWx1ZTogSW5kZWZpbml0ZU1vZGVsRGF0YSk6IFByb21pc2U8TW9kZWxEYXRhPjtcbiAgYWJzdHJhY3QgcmVhZEF0dHJpYnV0ZXModmFsdWU6IE1vZGVsUmVmZXJlbmNlKTogUHJvbWlzZTxNb2RlbERhdGE+O1xuICBhYnN0cmFjdCByZWFkUmVsYXRpb25zaGlwKFxuICAgIHZhbHVlOiBNb2RlbFJlZmVyZW5jZSxcbiAgICByZWxOYW1lOiBzdHJpbmcsXG4gICk6IFByb21pc2U8TW9kZWxEYXRhPjtcbiAgLy8gYWJzdHJhY3QgZGVsZXRlKHZhbHVlOiBNb2RlbFJlZmVyZW5jZSk6IFByb21pc2U8dm9pZD47XG4gIC8vIGFic3RyYWN0IHdyaXRlUmVsYXRpb25zaGlwSXRlbSggdmFsdWU6IE1vZGVsUmVmZXJlbmNlLCByZWxOYW1lOiBzdHJpbmcsIGNoaWxkOiB7aWQ6IHN0cmluZyB8IG51bWJlcn0gKTogUHJvbWlzZTxNb2RlbERhdGE+O1xuICAvLyBhYnN0cmFjdCBkZWxldGVSZWxhdGlvbnNoaXBJdGVtKCB2YWx1ZTogTW9kZWxSZWZlcmVuY2UsIHJlbE5hbWU6IHN0cmluZywgY2hpbGQ6IHtpZDogc3RyaW5nIHwgbnVtYmVyfSApOiBQcm9taXNlPE1vZGVsRGF0YT47XG4gIC8vXG4gIC8vXG4gIC8vIHF1ZXJ5KHE6IGFueSk6IFByb21pc2U8TW9kZWxSZWZlcmVuY2VbXT4ge1xuICAvLyAgIC8vIHE6IHt0eXBlOiBzdHJpbmcsIHF1ZXJ5OiBhbnl9XG4gIC8vICAgLy8gcS5xdWVyeSBpcyBpbXBsIGRlZmluZWQgLSBhIHN0cmluZyBmb3Igc3FsIChyYXcgc3FsKVxuICAvLyAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ1F1ZXJ5IG5vdCBpbXBsZW1lbnRlZCcpKTtcbiAgLy8gfVxuICAvL1xuICAvLyBjb252ZW5pZW5jZSBmdW5jdGlvbiB1c2VkIGludGVybmFsbHlcbiAgLy8gcmVhZCBhIGJ1bmNoIG9mIHJlbGF0aW9uc2hpcHMgYW5kIG1lcmdlIHRoZW0gdG9nZXRoZXIuXG4gIHJlYWRSZWxhdGlvbnNoaXBzKGl0ZW06IE1vZGVsUmVmZXJlbmNlLCByZWxhdGlvbnNoaXBzOiBzdHJpbmdbXSkge1xuICAgIHJldHVybiBQcm9taXNlLmFsbChcbiAgICAgIHJlbGF0aW9uc2hpcHMubWFwKHIgPT4gdGhpcy5yZWFkUmVsYXRpb25zaGlwKGl0ZW0sIHIpKSxcbiAgICApLnRoZW4ockEgPT5cbiAgICAgIHJBLnJlZHVjZSgoYSwgcikgPT4gbWVyZ2VPcHRpb25zKGEsIHIgfHwge30pLCB7XG4gICAgICAgIHR5cGU6IGl0ZW0udHlwZSxcbiAgICAgICAgaWQ6IGl0ZW0uaWQsXG4gICAgICAgIGF0dHJpYnV0ZXM6IHt9LFxuICAgICAgICByZWxhdGlvbnNoaXBzOiB7fSxcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cblxuICAvLyBkZWJvdW5jZXMgcmVhZHMgc28gbXVsdGlwbGUgcmVxdWVzdHMgZm9yIHRoZSBzYW1lIHRoaW5nIHJldHVybiB0aGUgc2FtZSBwcm9taXNlLlxuICByZWFkKFxuICAgIGl0ZW06IE1vZGVsUmVmZXJlbmNlLFxuICAgIG9wdHM6IHN0cmluZyB8IHN0cmluZ1tdID0gWydhdHRyaWJ1dGVzJ10sXG4gICAgZm9yY2U6IGJvb2xlYW4gPSBmYWxzZSxcbiAgKTogUHJvbWlzZTxNb2RlbERhdGE+IHtcbiAgICBjb25zdCBrZXlzID0gKG9wdHMgJiYgIUFycmF5LmlzQXJyYXkob3B0cykgPyBbb3B0c10gOiBvcHRzKSBhcyBzdHJpbmdbXTtcbiAgICBjb25zdCByZXFLZXkgPSBgJHtpdGVtLnR5cGV9OiR7aXRlbS5pZH0gLSAke2tleXMuam9pbignLicpfWA7XG4gICAgaWYgKGZvcmNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcmVhZChpdGVtLCBvcHRzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLmluUHJvZ3Jlc3NbcmVxS2V5XSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgIHRoaXMuaW5Qcm9ncmVzc1tyZXFLZXldID09PSBudWxsXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5pblByb2dyZXNzW3JlcUtleV0gPSB0aGlzLl9yZWFkKGl0ZW0sIG9wdHMpLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgICB0aGlzLmluUHJvZ3Jlc3NbcmVxS2V5XSA9IG51bGw7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5pblByb2dyZXNzW3JlcUtleV07XG4gICAgfVxuICB9XG5cbiAgLy8gZG9lcyB0aGUgYWN0dWFsIHJlYWRcbiAgX3JlYWQoaXRlbTogTW9kZWxSZWZlcmVuY2UsIG9wdHM6IHN0cmluZyB8IHN0cmluZ1tdID0gWydhdHRyaWJ1dGVzJ10pIHtcbiAgICBjb25zdCBzY2hlbWEgPSB0aGlzLmdldFNjaGVtYShpdGVtLnR5cGUpO1xuICAgIGNvbnN0IGtleXMgPSAob3B0cyAmJiAhQXJyYXkuaXNBcnJheShvcHRzKSA/IFtvcHRzXSA6IG9wdHMpIGFzIHN0cmluZ1tdO1xuICAgIHJldHVybiB0aGlzLnJlYWRBdHRyaWJ1dGVzKGl0ZW0pXG4gICAgICAudGhlbihhdHRyaWJ1dGVzID0+IHtcbiAgICAgICAgaWYgKCFhdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgLy8gdGhyb3cgbmV3IE5vdEZvdW5kRXJyb3IoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBhdHRyaWJ1dGVzLmlkICYmXG4gICAgICAgICAgICBhdHRyaWJ1dGVzLmF0dHJpYnV0ZXMgJiZcbiAgICAgICAgICAgICFhdHRyaWJ1dGVzLmF0dHJpYnV0ZXNbc2NoZW1hLmlkQXR0cmlidXRlXVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgYXR0cmlidXRlcy5hdHRyaWJ1dGVzW3NjaGVtYS5pZEF0dHJpYnV0ZV0gPSBhdHRyaWJ1dGVzLmlkOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gbG9hZCBpbiBkZWZhdWx0IHZhbHVlc1xuICAgICAgICAgIGlmIChhdHRyaWJ1dGVzLmF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgYXR0ck5hbWUgaW4gc2NoZW1hLmF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICFhdHRyaWJ1dGVzLmF0dHJpYnV0ZXNbYXR0ck5hbWVdICYmXG4gICAgICAgICAgICAgICAgc2NoZW1hLmF0dHJpYnV0ZXNbYXR0ck5hbWVdLmRlZmF1bHQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzY2hlbWEuYXR0cmlidXRlc1thdHRyTmFtZV0uZGVmYXVsdCkpIHtcbiAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMuYXR0cmlidXRlc1thdHRyTmFtZV0gPSAoc2NoZW1hLmF0dHJpYnV0ZXNbYXR0ck5hbWVdXG4gICAgICAgICAgICAgICAgICAgIC5kZWZhdWx0IGFzIGFueVtdKS5jb25jYXQoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgICAgdHlwZW9mIHNjaGVtYS5hdHRyaWJ1dGVzW2F0dHJOYW1lXS5kZWZhdWx0ID09PSAnb2JqZWN0J1xuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgYXR0cmlidXRlcy5hdHRyaWJ1dGVzW2F0dHJOYW1lXSA9IE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAgICAgICAgICBzY2hlbWEuYXR0cmlidXRlc1thdHRyTmFtZV0uZGVmYXVsdCxcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMuYXR0cmlidXRlc1thdHRyTmFtZV0gPVxuICAgICAgICAgICAgICAgICAgICBzY2hlbWEuYXR0cmlidXRlc1thdHRyTmFtZV0uZGVmYXVsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCByZWxzV2FudGVkID1cbiAgICAgICAgICAgIGtleXMuaW5kZXhPZigncmVsYXRpb25zaGlwcycpID49IDBcbiAgICAgICAgICAgICAgPyBPYmplY3Qua2V5cyhzY2hlbWEucmVsYXRpb25zaGlwcylcbiAgICAgICAgICAgICAgOiBrZXlzXG4gICAgICAgICAgICAgICAgICAubWFwKGsgPT4gay5zcGxpdCgnLicpKVxuICAgICAgICAgICAgICAgICAgLmZpbHRlcihrYSA9PiBrYVswXSA9PT0gJ3JlbGF0aW9uc2hpcHMnKVxuICAgICAgICAgICAgICAgICAgLm1hcChrYSA9PiBrYVsxXSk7XG4gICAgICAgICAgY29uc3QgcmVsc1RvRmV0Y2ggPSByZWxzV2FudGVkLmZpbHRlcihcbiAgICAgICAgICAgIHJlbE5hbWUgPT4gIWF0dHJpYnV0ZXMucmVsYXRpb25zaGlwc1tyZWxOYW1lXSxcbiAgICAgICAgICApO1xuICAgICAgICAgIC8vIHJlYWRBdHRyaWJ1dGVzIGNhbiByZXR1cm4gcmVsYXRpb25zaGlwIGRhdGEsIHNvIGRvbid0IGZldGNoIHRob3NlXG4gICAgICAgICAgaWYgKHJlbHNUb0ZldGNoLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlYWRSZWxhdGlvbnNoaXBzKGl0ZW0sIHJlbHNUb0ZldGNoKS50aGVuKHJlbHMgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gbWVyZ2VPcHRpb25zKGF0dHJpYnV0ZXMsIHJlbHMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBhdHRyaWJ1dGVzO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICBPYmplY3Qua2V5cyhyZXN1bHQucmVsYXRpb25zaGlwcykuZm9yRWFjaChyZWxOYW1lID0+IHtcbiAgICAgICAgICAgIHJlc3VsdC5yZWxhdGlvbnNoaXBzW3JlbE5hbWVdLmZvckVhY2gocmVsSXRlbSA9PiB7XG4gICAgICAgICAgICAgIHJlbEl0ZW0udHlwZSA9IHRoaXMuZ2V0U2NoZW1hKHJlc3VsdC50eXBlKS5yZWxhdGlvbnNoaXBzW1xuICAgICAgICAgICAgICAgIHJlbE5hbWVcbiAgICAgICAgICAgICAgXS50eXBlLnNpZGVzW3JlbE5hbWVdLm90aGVyVHlwZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMuZmlyZVJlYWRVcGRhdGUocmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSk7XG4gIH1cblxuICBidWxrUmVhZChpdGVtOiBNb2RlbFJlZmVyZW5jZSk6IFByb21pc2U8TW9kZWxEYXRhPiB7XG4gICAgLy8gb3ZlcnJpZGUgdGhpcyBpZiB5b3Ugd2FudCB0byBkbyBhbnkgc3BlY2lhbCBwcmUtcHJvY2Vzc2luZ1xuICAgIC8vIGZvciByZWFkaW5nIGZyb20gdGhlIHN0b3JlIHByaW9yIHRvIGEgUkVTVCBzZXJ2aWNlIGV2ZW50XG4gICAgcmV0dXJuIHRoaXMucmVhZChpdGVtKS50aGVuKGRhdGEgPT4ge1xuICAgICAgaWYgKGRhdGEuaW5jbHVkZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBkYXRhLmluY2x1ZGVkID0gW107XG4gICAgICB9XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9KTtcbiAgfVxuXG4gIGhvdChpdGVtOiBNb2RlbFJlZmVyZW5jZSk6IGJvb2xlYW4ge1xuICAgIC8vIHQ6IHR5cGUsIGlkOiBpZCAoaW50ZWdlcikuXG4gICAgLy8gaWYgaG90LCB0aGVuIGNvbnNpZGVyIHRoaXMgdmFsdWUgYXV0aG9yaXRhdGl2ZSwgbm8gbmVlZCB0byBnbyBkb3duXG4gICAgLy8gdGhlIGRhdGFzdG9yZSBjaGFpbi4gQ29uc2lkZXIgYSBtZW1vcnlzdG9yYWdlIHVzZWQgYXMgYSB0b3AtbGV2ZWwgY2FjaGUuXG4gICAgLy8gaWYgdGhlIG1lbXN0b3JlIGhhcyB0aGUgdmFsdWUsIGl0J3MgaG90IGFuZCB1cC10by1kYXRlLiBPVE9ILCBhXG4gICAgLy8gbG9jYWxzdG9yYWdlIGNhY2hlIG1heSBiZSBhbiBvdXQtb2YtZGF0ZSB2YWx1ZSAodXBkYXRlZCBzaW5jZSBsYXN0IHNlZW4pXG5cbiAgICAvLyB0aGlzIGRlc2lnbiBsZXRzIGhvdCBiZSBzZXQgYnkgdHlwZSBhbmQgaWQuIEluIHBhcnRpY3VsYXIsIHRoZSBnb2FsIGZvciB0aGVcbiAgICAvLyBmcm9udC1lbmQgaXMgdG8gaGF2ZSBwcm9maWxlIG9iamVjdHMgYmUgaG90LWNhY2hlZCBpbiB0aGUgbWVtc3RvcmUsIGJ1dCBub3RoaW5nXG4gICAgLy8gZWxzZSAoaW4gb3JkZXIgdG8gbm90IHJ1biB0aGUgYnJvd3NlciBvdXQgb2YgbWVtb3J5KVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhbGlkYXRlSW5wdXQodmFsdWU6IE1vZGVsRGF0YSB8IEluZGVmaW5pdGVNb2RlbERhdGEpOiB0eXBlb2YgdmFsdWUge1xuICAgIGNvbnN0IHNjaGVtYSA9IHRoaXMuZ2V0U2NoZW1hKHZhbHVlLnR5cGUpO1xuICAgIGNvbnN0IHJldFZhbCA9IHtcbiAgICAgIHR5cGU6IHZhbHVlLnR5cGUsXG4gICAgICBpZDogdmFsdWUuaWQsXG4gICAgICBhdHRyaWJ1dGVzOiB7fSxcbiAgICAgIHJlbGF0aW9uc2hpcHM6IHt9LFxuICAgIH07XG4gICAgY29uc3QgdHlwZUF0dHJzID0gT2JqZWN0LmtleXMoc2NoZW1hLmF0dHJpYnV0ZXMgfHwge30pO1xuICAgIGNvbnN0IHZhbEF0dHJzID0gT2JqZWN0LmtleXModmFsdWUuYXR0cmlidXRlcyB8fCB7fSk7XG4gICAgY29uc3QgdHlwZVJlbHMgPSBPYmplY3Qua2V5cyhzY2hlbWEucmVsYXRpb25zaGlwcyB8fCB7fSk7XG4gICAgY29uc3QgdmFsUmVscyA9IE9iamVjdC5rZXlzKHZhbHVlLnJlbGF0aW9uc2hpcHMgfHwge30pO1xuICAgIGNvbnN0IGlkQXR0cmlidXRlID0gc2NoZW1hLmlkQXR0cmlidXRlO1xuXG4gICAgY29uc3QgaW52YWxpZEF0dHJzID0gdmFsQXR0cnMuZmlsdGVyKGl0ZW0gPT4gdHlwZUF0dHJzLmluZGV4T2YoaXRlbSkgPCAwKTtcbiAgICBjb25zdCBpbnZhbGlkUmVscyA9IHZhbFJlbHMuZmlsdGVyKGl0ZW0gPT4gdHlwZVJlbHMuaW5kZXhPZihpdGVtKSA8IDApO1xuXG4gICAgaWYgKGludmFsaWRBdHRycy5sZW5ndGggPiAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBJbnZhbGlkIGF0dHJpYnV0ZXMgb24gdmFsdWUgb2JqZWN0OiAke0pTT04uc3RyaW5naWZ5KGludmFsaWRBdHRycyl9YCxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGludmFsaWRSZWxzLmxlbmd0aCA+IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYEludmFsaWQgcmVsYXRpb25zaGlwcyBvbiB2YWx1ZSBvYmplY3Q6ICR7SlNPTi5zdHJpbmdpZnkoaW52YWxpZFJlbHMpfWAsXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICh2YWx1ZS5hdHRyaWJ1dGVzW2lkQXR0cmlidXRlXSAmJiAhcmV0VmFsLmlkKSB7XG4gICAgICByZXRWYWwuaWQgPSB2YWx1ZS5hdHRyaWJ1dGVzW2lkQXR0cmlidXRlXTtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IHJlbE5hbWUgaW4gc2NoZW1hLnJlbGF0aW9uc2hpcHMpIHtcbiAgICAgIGlmIChcbiAgICAgICAgdmFsdWUucmVsYXRpb25zaGlwcyAmJlxuICAgICAgICB2YWx1ZS5yZWxhdGlvbnNoaXBzW3JlbE5hbWVdICYmXG4gICAgICAgICFBcnJheS5pc0FycmF5KHZhbHVlLnJlbGF0aW9uc2hpcHNbcmVsTmFtZV0pXG4gICAgICApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGByZWxhdGlvbiAke3JlbE5hbWV9IGlzIG5vdCBhbiBhcnJheWApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VPcHRpb25zKHt9LCB2YWx1ZSwgcmV0VmFsKTtcbiAgfVxuXG4gIC8vIHN0b3JlIHR5cGUgaW5mbyBkYXRhIG9uIHRoZSBzdG9yZSBpdHNlbGZcblxuICBnZXRTY2hlbWEodDogeyBzY2hlbWE6IE1vZGVsU2NoZW1hIH0gfCBNb2RlbFNjaGVtYSB8IHN0cmluZyk6IE1vZGVsU2NoZW1hIHtcbiAgICBpZiAodHlwZW9mIHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gdGhpcy50eXBlc1t0XTtcbiAgICB9IGVsc2UgaWYgKHRbJ3NjaGVtYSddKSB7XG4gICAgICByZXR1cm4gKHQgYXMgeyBzY2hlbWE6IE1vZGVsU2NoZW1hIH0pLnNjaGVtYTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHQgYXMgTW9kZWxTY2hlbWE7XG4gICAgfVxuICB9XG5cbiAgYWRkU2NoZW1hKHQ6IHsgdHlwZTogc3RyaW5nOyBzY2hlbWE6IE1vZGVsU2NoZW1hIH0pIHtcbiAgICB0aGlzLnR5cGVzW3QudHlwZV0gPSB0LnNjaGVtYTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cblxuICBhZGRTY2hlbWFzKGE6IHsgdHlwZTogc3RyaW5nOyBzY2hlbWE6IE1vZGVsU2NoZW1hIH1bXSk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBQcm9taXNlLmFsbChhLm1hcCh0ID0+IHRoaXMuYWRkU2NoZW1hKHQpKSkudGhlbigoKSA9PiB7XG4gICAgICAvKiBub29wICovXG4gICAgfSk7XG4gIH1cblxuICBmaXJlV3JpdGVVcGRhdGUodmFsOiBNb2RlbERlbHRhKSB7XG4gICAgdGhpcy53cml0ZVN1YmplY3QubmV4dCh2YWwpO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsKTtcbiAgfVxuXG4gIGZpcmVSZWFkVXBkYXRlKHZhbDogTW9kZWxEYXRhKSB7XG4gICAgdGhpcy5yZWFkU3ViamVjdC5uZXh0KHZhbCk7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWwpO1xuICB9XG59XG4iXX0=
