"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var mergeOptions = require("merge-options");
var rxjs_1 = require("rxjs");
var Storage = (function () {
    function Storage(opts) {
        if (opts === void 0) { opts = {}; }
        this.types = {};
        this.readSubject = new rxjs_1.Subject();
        this.writeSubject = new rxjs_1.Subject();
        this.terminal = opts.terminal || false;
        this.read$ = this.readSubject.asObservable();
        this.write$ = this.writeSubject.asObservable();
    }
    Storage.prototype.readRelationships = function (item, relationships) {
        var _this = this;
        return Promise.all(relationships.map(function (r) { return _this.readRelationship(item, r); })).then(function (rA) {
            return rA.reduce(function (a, r) { return mergeOptions(a, r || {}); }, {
                type: item.type,
                id: item.id,
                attributes: {},
                relationships: {},
            });
        });
    };
    Storage.prototype.read = function (item, opts) {
        var _this = this;
        if (opts === void 0) { opts = ['attributes']; }
        var schema = this.getSchema(item.type);
        var keys = (opts && !Array.isArray(opts) ? [opts] : opts);
        return this.readAttributes(item)
            .then(function (attributes) {
            if (!attributes) {
                return null;
            }
            else {
                if (attributes.id &&
                    attributes.attributes &&
                    !attributes.attributes[schema.idAttribute]) {
                    attributes.attributes[schema.idAttribute] = attributes.id;
                }
                if (attributes.attributes) {
                    for (var attrName in schema.attributes) {
                        if (!attributes.attributes[attrName] &&
                            schema.attributes[attrName].default !== undefined) {
                            if (Array.isArray(schema.attributes[attrName].default)) {
                                attributes.attributes[attrName] = schema.attributes[attrName]
                                    .default.concat();
                            }
                            else if (typeof schema.attributes[attrName].default === 'object') {
                                attributes.attributes[attrName] = Object.assign({}, schema.attributes[attrName].default);
                            }
                            else {
                                attributes.attributes[attrName] =
                                    schema.attributes[attrName].default;
                            }
                        }
                    }
                }
                var relsWanted = keys.indexOf('relationships') >= 0
                    ? Object.keys(schema.relationships)
                    : keys
                        .map(function (k) { return k.split('.'); })
                        .filter(function (ka) { return ka[0] === 'relationships'; })
                        .map(function (ka) { return ka[1]; });
                var relsToFetch = relsWanted.filter(function (relName) { return !attributes.relationships[relName]; });
                if (relsToFetch.length > 0) {
                    return _this.readRelationships(item, relsToFetch).then(function (rels) {
                        return mergeOptions(attributes, rels);
                    });
                }
                else {
                    return attributes;
                }
            }
        })
            .then(function (result) {
            if (result) {
                Object.keys(result.relationships).forEach(function (relName) {
                    result.relationships[relName].forEach(function (relItem) {
                        relItem.type = _this.getSchema(result.type).relationships[relName].type.sides[relName].otherType;
                    });
                });
                _this.fireReadUpdate(result);
            }
            return result;
        });
    };
    Storage.prototype.bulkRead = function (item) {
        return this.read(item).then(function (data) {
            if (data.included === undefined) {
                data.included = [];
            }
            return data;
        });
    };
    Storage.prototype.hot = function (item) {
        return false;
    };
    Storage.prototype.validateInput = function (value) {
        var schema = this.getSchema(value.type);
        var retVal = {
            type: value.type,
            id: value.id,
            attributes: {},
            relationships: {},
        };
        var typeAttrs = Object.keys(schema.attributes || {});
        var valAttrs = Object.keys(value.attributes || {});
        var typeRels = Object.keys(schema.relationships || {});
        var valRels = Object.keys(value.relationships || {});
        var idAttribute = schema.idAttribute;
        var invalidAttrs = valAttrs.filter(function (item) { return typeAttrs.indexOf(item) < 0; });
        var invalidRels = valRels.filter(function (item) { return typeRels.indexOf(item) < 0; });
        if (invalidAttrs.length > 0) {
            throw new Error("Invalid attributes on value object: " + JSON.stringify(invalidAttrs));
        }
        if (invalidRels.length > 0) {
            throw new Error("Invalid relationships on value object: " + JSON.stringify(invalidRels));
        }
        if (value.attributes[idAttribute] && !retVal.id) {
            retVal.id = value.attributes[idAttribute];
        }
        for (var relName in schema.relationships) {
            if (value.relationships &&
                value.relationships[relName] &&
                !Array.isArray(value.relationships[relName])) {
                throw new Error("relation " + relName + " is not an array");
            }
        }
        return mergeOptions({}, value, retVal);
    };
    Storage.prototype.getSchema = function (t) {
        if (typeof t === 'string') {
            return this.types[t];
        }
        else if (t['schema']) {
            return t.schema;
        }
        else {
            return t;
        }
    };
    Storage.prototype.addSchema = function (t) {
        this.types[t.type] = t.schema;
        return Promise.resolve();
    };
    Storage.prototype.addSchemas = function (a) {
        var _this = this;
        return Promise.all(a.map(function (t) { return _this.addSchema(t); })).then(function () {
        });
    };
    Storage.prototype.fireWriteUpdate = function (val) {
        this.writeSubject.next(val);
        return Promise.resolve(val);
    };
    Storage.prototype.fireReadUpdate = function (val) {
        this.readSubject.next(val);
        return Promise.resolve(val);
    };
    return Storage;
}());
exports.Storage = Storage;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
