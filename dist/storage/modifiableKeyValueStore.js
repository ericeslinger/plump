"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var mergeOptions = require("merge-options");
var storage_1 = require("./storage");
var ModifiableKeyValueStore = (function (_super) {
    __extends(ModifiableKeyValueStore, _super);
    function ModifiableKeyValueStore() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.maxKeys = {};
        return _this;
    }
    ModifiableKeyValueStore.prototype.allocateId = function (type) {
        this.maxKeys[type] = this.maxKeys[type] + 1;
        return Promise.resolve(this.maxKeys[type]);
    };
    ModifiableKeyValueStore.prototype.writeAttributes = function (inputValue) {
        var _this = this;
        var value = this.validateInput(inputValue);
        delete value.relationships;
        return Promise.resolve()
            .then(function () {
            var idAttribute = _this.getSchema(inputValue.type).idAttribute;
            if (value.id === undefined || value.id === null) {
                if (!_this.terminal) {
                    throw new Error('Cannot create new content in a non-terminal store');
                }
                return _this.allocateId(value.type).then(function (n) {
                    return mergeOptions({}, value, {
                        id: n,
                        relationships: {},
                        attributes: (_a = {}, _a[idAttribute] = n, _a),
                    });
                    var _a;
                });
            }
            else {
                _this.maxKeys[inputValue.type] = Math.max(_this.maxKeys[inputValue.type], value.id);
                return value;
            }
        })
            .then(function (toSave) {
            return _this._upsert(toSave).then(function () {
                _this.fireWriteUpdate(Object.assign({}, toSave, { invalidate: ['attributes'] }));
                return toSave;
            });
        });
    };
    ModifiableKeyValueStore.prototype.readAttributes = function (value) {
        return this._get(value).then(function (d) {
            if (d && d.attributes) {
                return d;
            }
            else {
                return null;
            }
        });
    };
    ModifiableKeyValueStore.prototype.cache = function (value) {
        var _this = this;
        if (value.id === undefined || value.id === null) {
            return Promise.reject('Cannot cache data without an id - write it to a terminal first');
        }
        else {
            return this._get(value).then(function (current) {
                var newVal = mergeOptions(current || {}, value);
                return _this._upsert(newVal);
            });
        }
    };
    ModifiableKeyValueStore.prototype.cacheAttributes = function (value) {
        var _this = this;
        if (value.id === undefined || value.id === null) {
            return Promise.reject('Cannot cache data without an id - write it to a terminal first');
        }
        else {
            return this._get(value).then(function (current) {
                return _this._upsert({
                    type: value.type,
                    id: value.id,
                    attributes: value.attributes,
                    relationships: current.relationships || {},
                });
            });
        }
    };
    ModifiableKeyValueStore.prototype.cacheRelationship = function (value) {
        var _this = this;
        if (value.id === undefined || value.id === null) {
            return Promise.reject('Cannot cache data without an id - write it to a terminal first');
        }
        else {
            return this._get(value).then(function (current) {
                return _this._upsert({
                    type: value.type,
                    id: value.id,
                    attributes: current.attributes || {},
                    relationships: value.relationships,
                });
            });
        }
    };
    ModifiableKeyValueStore.prototype.readRelationship = function (value, relName) {
        var _this = this;
        return this._get(value).then(function (v) {
            var retVal = Object.assign({}, v);
            if (!v) {
                if (_this.terminal) {
                    return {
                        type: value.type,
                        id: value.id,
                        relationships: (_a = {}, _a[relName] = [], _a),
                    };
                }
                else {
                    return null;
                }
            }
            else if (!v.relationships && _this.terminal) {
                retVal.relationships = (_b = {}, _b[relName] = [], _b);
            }
            else if (!retVal.relationships[relName] && _this.terminal) {
                retVal.relationships[relName] = [];
            }
            return retVal;
            var _a, _b;
        });
    };
    ModifiableKeyValueStore.prototype.delete = function (value) {
        var _this = this;
        return this._del(value, ['attributes', 'relationships']).then(function () {
            if (_this.terminal) {
                _this.fireWriteUpdate({
                    id: value.id,
                    type: value.type,
                    invalidate: ['attributes', 'relationships'],
                });
            }
        });
    };
    ModifiableKeyValueStore.prototype.wipe = function (value, field) {
        return this._del(value, [field]);
    };
    ModifiableKeyValueStore.prototype.writeRelationshipItem = function (value, relName, child) {
        var _this = this;
        var schema = this.getSchema(value.type);
        var relSchema = schema.relationships[relName].type;
        var otherRelType = relSchema.sides[relName].otherType;
        var otherRelName = relSchema.sides[relName].otherName;
        var otherReference = { type: otherRelType, id: child.id };
        var newChild = { id: child.id, type: otherRelType };
        var newParent = { id: value.id, type: schema.name };
        if (relSchema.extras && child.meta) {
            newParent.meta = {};
            newChild.meta = {};
            for (var extra in child.meta) {
                if (extra in relSchema.extras) {
                    newChild.meta[extra] = child.meta[extra];
                    newParent.meta[extra] = child.meta[extra];
                }
            }
        }
        return Promise.all([
            this._updateArray(value, relName, newChild),
            this._updateArray(otherReference, otherRelName, newParent),
        ])
            .then(function () {
            _this.fireWriteUpdate(Object.assign(value, { invalidate: ["relationships." + relName] }));
            _this.fireWriteUpdate(Object.assign({ type: otherRelType, id: child.id }, { invalidate: ["relationships." + otherRelName] }));
        })
            .then(function () { return value; });
    };
    ModifiableKeyValueStore.prototype.deleteRelationshipItem = function (value, relName, child) {
        var _this = this;
        var schema = this.getSchema(value.type);
        var relSchema = schema.relationships[relName].type;
        var otherRelType = relSchema.sides[relName].otherType;
        var otherRelName = relSchema.sides[relName].otherName;
        var otherReference = { type: otherRelType, id: child.id };
        var newChild = { id: child.id, type: otherRelType };
        var newParent = { id: value.id, type: value.type };
        if (relSchema.extras && child.meta) {
            newParent.meta = {};
            newChild.meta = {};
            for (var extra in child.meta) {
                if (extra in relSchema.extras) {
                    newChild.meta[extra] = child.meta[extra];
                    newParent.meta[extra] = child.meta[extra];
                }
            }
        }
        return Promise.all([
            this._removeFromArray(value, relName, newChild),
            this._removeFromArray(otherReference, otherRelName, newParent),
        ])
            .then(function () {
            _this.fireWriteUpdate(Object.assign(value, { invalidate: ["relationships." + relName] }));
            _this.fireWriteUpdate(Object.assign({ type: otherRelType, id: child.id }, { invalidate: ["relationships." + otherRelName] }));
        })
            .then(function () { return value; });
    };
    ModifiableKeyValueStore.prototype.query = function (t, q) {
        return this._keys(t).then(function (keys) {
            return keys
                .map(function (k) {
                return {
                    type: t,
                    id: parseInt(k.split(':')[1], 10),
                };
            })
                .filter(function (v) { return !isNaN(v.id); });
        });
    };
    ModifiableKeyValueStore.prototype.addSchema = function (t) {
        var _this = this;
        return _super.prototype.addSchema.call(this, t).then(function () {
            _this.maxKeys[t.type] = 0;
        });
    };
    ModifiableKeyValueStore.prototype.keyString = function (value) {
        return value.type + ":" + value.id;
    };
    return ModifiableKeyValueStore;
}(storage_1.Storage));
exports.ModifiableKeyValueStore = ModifiableKeyValueStore;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
