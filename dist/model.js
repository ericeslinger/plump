import * as mergeOptions from 'merge-options';
import { Observable } from 'rxjs/Rx';
import { validateInput } from './util';
// TODO: figure out where error events originate (storage or model)
// and who keeps a roll-backable delta
var Model = (function () {
    function Model(opts, plump) {
        this.plump = plump;
        // TODO: Define Delta interface
        this.dirty = {
            attributes: {},
            relationships: {},
        };
        this.$$copyValuesFrom(opts);
        // this.$$fireUpdate(opts);
    }
    Object.defineProperty(Model.prototype, "typeName", {
        get: function () {
            return this.constructor['typeName'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Model.prototype, "schema", {
        get: function () {
            return this.constructor['schema'];
        },
        enumerable: true,
        configurable: true
    });
    Model.prototype.dirtyFields = function () {
        var _this = this;
        return Object.keys(this.dirty.attributes)
            .filter(function (k) { return k !== _this.schema.idAttribute; })
            .concat(Object.keys(this.dirty.relationships));
    };
    Model.prototype.$$copyValuesFrom = function (opts) {
        if (opts === void 0) { opts = {}; }
        // const idField = this.constructor.$id in opts ? this.constructor.$id : 'id';
        // this[this.constructor.$id] = opts[idField] || this.id;
        if ((this.id === undefined) && (opts[this.schema.idAttribute])) {
            this.id = opts[this.schema.idAttribute];
        }
        this.dirty = mergeOptions(this.dirty, { attributes: opts });
    };
    Model.prototype.$$resetDirty = function () {
        this.dirty = {
            attributes: {},
            relationships: {},
        };
    };
    // $$fireUpdate(v) {
    //   const update = Model.resolveAndOverlay(this.dirty, v);
    //   if (this.id) {
    //     update.id = this.id;
    //   }
    //   this[$subject].next(update);
    // }
    // API METHODS
    Model.prototype.get = function (opts) {
        var _this = this;
        if (opts === void 0) { opts = 'attributes'; }
        // If opts is falsy (i.e., undefined), get attributes
        // Otherwise, get what was requested,
        // wrapping the request in a Array if it wasn't already one
        var keys = opts && !Array.isArray(opts) ? [opts] : opts;
        return this.plump.get(this, keys)
            .then(function (self) {
            if (!self && _this.dirtyFields().length === 0) {
                return null;
            }
            else if (_this.dirtyFields().length === 0) {
                return self;
            }
            else {
                var resolved = Model.resolveAndOverlay(_this.dirty, self || undefined);
                return mergeOptions({}, self || { id: _this.id, type: _this.typeName }, resolved);
            }
        });
    };
    Model.prototype.bulkGet = function () {
        return this.plump.bulkGet(this.constructor, this.id);
    };
    // TODO: Should $save ultimately return this.get()?
    Model.prototype.save = function () {
        var _this = this;
        var update = mergeOptions({ id: this.id, typeName: this.typeName }, this.dirty);
        return this.plump.save(update)
            .then(function (updated) {
            _this.$$resetDirty();
            if (updated.id) {
                _this.id = updated.id;
            }
            return _this.get();
        });
    };
    Model.prototype.set = function (update) {
        var _this = this;
        var flat = update.attributes || update;
        // Filter out non-attribute keys
        var sanitized = Object.keys(flat)
            .filter(function (k) { return k in _this.schema.attributes; })
            .map(function (k) {
            return _a = {}, _a[k] = flat[k], _a;
            var _a;
        })
            .reduce(function (acc, curr) { return mergeOptions(acc, curr); }, {});
        this.$$copyValuesFrom(sanitized);
        // this.$$fireUpdate(sanitized);
        return this;
    };
    Model.prototype.subscribe = function (arg1, arg2) {
        var _this = this;
        var fields = [];
        var cb = null;
        if (arg2) {
            cb = arg2;
            if (Array.isArray(arg1)) {
                fields = arg1;
            }
            else {
                fields = [arg1];
            }
        }
        else {
            cb = arg1;
            fields = ['attributes'];
        }
        if (fields.indexOf('relationships') >= 0) {
            fields = fields.concat(Object.keys(this.schema.relationships).map(function (k) { return "relationships." + k; }));
        }
        var hots = this.plump.storage.filter(function (s) { return s.hot(_this.typeName, _this.id); });
        var colds = this.plump.storage.filter(function (s) { return !s.hot(_this.typeName, _this.id); });
        var terminal = this.plump.terminal;
        var preload$ = Observable.from(hots)
            .flatMap(function (s) { return Observable.fromPromise(s.read(_this, fields)); })
            .defaultIfEmpty(null)
            .flatMap(function (v) {
            if (v !== null) {
                return Observable.of(v);
            }
            else {
                var terminal$ = Observable.of(terminal)
                    .flatMap(function (s) { return Observable.fromPromise(s.read(_this, fields)); })
                    .share();
                var cold$ = Observable.from(colds)
                    .flatMap(function (s) { return Observable.fromPromise(s.read(_this, fields)); });
                return Observable.merge(terminal$, cold$.takeUntil(terminal$));
            }
        });
        // TODO: cacheable reads
        // const watchRead$ = Observable.from(terminal)
        // .flatMap(s => s.read$.filter(v => v.type === this.typeName && v.id === this.id));
        var watchWrite$ = terminal.write$
            .filter(function (v) {
            return ((v.typeName === _this.typeName) &&
                (v.id === _this.id) &&
                (v.invalidate.some(function (i) { return fields.indexOf(i) >= 0; })));
        })
            .flatMapTo(Observable.of(terminal)
            .flatMap(function (s) { return Observable.fromPromise(s.read(_this, fields)); }));
        // );
        return preload$.merge(watchWrite$)
            .subscribe(cb);
    };
    Model.prototype.delete = function () {
        return this.plump.delete(this);
    };
    Model.prototype.$rest = function (opts) {
        var restOpts = Object.assign({}, opts, {
            url: "/" + this.constructor['type'] + "/" + this.id + "/" + opts.url,
        });
        return this.plump.restRequest(restOpts).then(function (res) { return res.data; });
    };
    Model.prototype.add = function (key, item) {
        if (key in this.schema.relationships) {
            if (item.id >= 1) {
                if (this.dirty.relationships[key] === undefined) {
                    this.dirty.relationships[key] = [];
                }
                this.dirty.relationships[key].push({
                    op: 'add',
                    data: item,
                });
                // this.$$fireUpdate();
                return this;
            }
            else {
                throw new Error('Invalid item added to hasMany');
            }
        }
        else {
            throw new Error('Cannot $add except to hasMany field');
        }
    };
    Model.prototype.modifyRelationship = function (key, item) {
        if (key in this.schema.relationships) {
            if (item.id >= 1) {
                this.dirty.relationships[key] = this.dirty.relationships[key] || [];
                this.dirty.relationships[key].push({
                    op: 'modify',
                    data: item,
                });
                // this.$$fireUpdate();
                return this;
            }
            else {
                throw new Error('Invalid item added to hasMany');
            }
        }
        else {
            throw new Error('Cannot $add except to hasMany field');
        }
    };
    Model.prototype.remove = function (key, item) {
        if (key in this.schema.relationships) {
            if (item.id >= 1) {
                if (!(key in this.dirty.relationships)) {
                    this.dirty.relationships[key] = [];
                }
                this.dirty.relationships[key].push({
                    op: 'remove',
                    data: item,
                });
                // this.$$fireUpdate();
                return this;
            }
            else {
                throw new Error('Invalid item $removed from hasMany');
            }
        }
        else {
            throw new Error('Cannot $remove except from hasMany field');
        }
    };
    // static rest(plump, opts) {
    //   const restOpts = Object.assign(
    //     {},
    //     opts,
    //     {
    //       url: `/${this.schema.name}/${opts.url}`,
    //     }
    //   );
    //   return plump.restRequest(restOpts);
    // }
    Model.applyDefaults = function (v) {
        return validateInput(this.schema, v);
    };
    ;
    Model.applyDelta = function (current, delta) {
        if (delta.op === 'add' || delta.op === 'modify') {
            var retVal = mergeOptions({}, current, delta.data);
            return retVal;
        }
        else if (delta.op === 'remove') {
            return undefined;
        }
        else {
            return current;
        }
    };
    ;
    Model.cacheGet = function (store, key) {
        return (this.storeCache.get(store) || {})[key];
    };
    Model.cacheSet = function (store, key, value) {
        if (this.storeCache.get(store) === undefined) {
            this.storeCache.set(store, {});
        }
        this.storeCache.get(store)[key] = value;
    };
    Model.resolveAndOverlay = function (update, base) {
        if (base === void 0) { base = { attributes: {}, relationships: {} }; }
        var attributes = mergeOptions({}, base.attributes, update.attributes);
        var resolvedRelationships = this.resolveRelationships(update.relationships, base.relationships);
        return { attributes: attributes, relationships: resolvedRelationships };
    };
    Model.resolveRelationships = function (deltas, base) {
        var _this = this;
        if (base === void 0) { base = {}; }
        var updates = Object.keys(deltas).map(function (relName) {
            var resolved = _this.resolveRelationship(deltas[relName], base[relName]);
            return _a = {}, _a[relName] = resolved, _a;
            var _a;
        })
            .reduce(function (acc, curr) { return mergeOptions(acc, curr); }, {});
        return mergeOptions({}, base, updates);
    };
    Model.resolveRelationship = function (deltas, base) {
        if (base === void 0) { base = []; }
        var retVal = base.concat();
        deltas.forEach(function (delta) {
            if ((delta.op === 'add') || (delta.op === 'modify')) {
                var currentIndex = retVal.findIndex(function (v) { return v.id === delta.data.id; });
                if (currentIndex >= 0) {
                    retVal[currentIndex] = delta.data;
                }
                else {
                    retVal.push(delta.data);
                }
            }
            else if (delta.op === 'remove') {
                var currentIndex = retVal.findIndex(function (v) { return v.id === delta.data.id; });
                if (currentIndex >= 0) {
                    retVal.splice(currentIndex, 1);
                }
            }
        });
        return retVal;
    };
    return Model;
}());
export { Model };
Model.typeName = 'BASE';
Model.schema = {
    idAttribute: 'id',
    name: 'BASE',
    attributes: {},
    relationships: {},
};
Model.storeCache = new Map();

//# sourceMappingURL=data:application/json;charset=utf8;base64,
