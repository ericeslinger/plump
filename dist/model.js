"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var mergeOptions = require("merge-options");
var deepEqual = require("deep-equal");
var rxjs_1 = require("rxjs");
var plump_1 = require("./plump");
var errors_1 = require("./errors");
function condMerge(arg) {
    var args = arg.filter(function (v) { return !!v; });
    if (args[0] && args[0].empty && args.length > 1) {
        delete args[0].empty;
    }
    return mergeOptions.apply(void 0, args);
}
var Model = (function () {
    function Model(opts, plump) {
        this.plump = plump;
        this._write$ = new rxjs_1.Subject();
        this.error = null;
        if (this.type === 'BASE') {
            throw new TypeError('Cannot instantiate base plump Models, please subclass with a schema and valid type');
        }
        this.dirty = {
            attributes: {},
            relationships: {},
        };
        this.$$copyValuesFrom(opts);
    }
    Object.defineProperty(Model.prototype, "type", {
        get: function () {
            return this.constructor['type'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Model.prototype, "schema", {
        get: function () {
            return this.constructor['schema'];
        },
        enumerable: true,
        configurable: true
    });
    Model.empty = function (id) {
        var _this = this;
        var retVal = {
            id: id,
            type: this.type,
            empty: true,
            attributes: {},
            relationships: {},
        };
        Object.keys(this.schema.attributes).forEach(function (key) {
            if (_this.schema.attributes[key].type === 'number') {
                retVal.attributes[key] = _this.schema.attributes[key].default || 0;
            }
            else if (_this.schema.attributes[key].type === 'date') {
                retVal.attributes[key] = new Date(_this.schema.attributes[key].default || Date.now());
            }
            else if (_this.schema.attributes[key].type === 'string') {
                retVal.attributes[key] = _this.schema.attributes[key].default || '';
            }
            else if (_this.schema.attributes[key].type === 'object') {
                retVal.attributes[key] = Object.assign({}, _this.schema.attributes[key].default);
            }
            else if (_this.schema.attributes[key].type === 'array') {
                retVal.attributes[key] = (_this.schema.attributes[key]
                    .default || []).concat();
            }
        });
        Object.keys(this.schema.relationships).forEach(function (key) {
            retVal.relationships[key] = [];
        });
        return retVal;
    };
    Model.prototype.empty = function (id) {
        return this.constructor['empty'](id);
    };
    Model.prototype.dirtyFields = function () {
        var _this = this;
        return Object.keys(this.dirty.attributes)
            .filter(function (k) { return k !== _this.schema.idAttribute; })
            .concat(Object.keys(this.dirty.relationships));
    };
    Model.prototype.$$copyValuesFrom = function (opts) {
        if (opts === void 0) { opts = {}; }
        if (this.id === undefined && opts[this.schema.idAttribute]) {
            if (this.schema.attributes[this.schema.idAttribute].type === 'number') {
                this.id = parseInt(opts[this.schema.idAttribute], 10);
            }
            else {
                this.id = opts[this.schema.idAttribute];
            }
        }
        this.dirty = mergeOptions(this.dirty, { attributes: opts });
    };
    Model.prototype.$$resetDirty = function () {
        this.dirty = {
            attributes: {},
            relationships: {},
        };
        this.$$fireUpdate();
    };
    Model.prototype.$$fireUpdate = function (force) {
        if (force === void 0) { force = false; }
        if (!this.id || force) {
            this._write$.next({
                attributes: this.dirty.attributes,
                type: this.type,
            });
        }
    };
    Model.prototype.get = function (opts) {
        var _this = this;
        if (opts === void 0) { opts = 'attributes'; }
        var keys = opts && !Array.isArray(opts) ? [opts] : opts;
        return this.plump
            .get(this, keys)
            .catch(function (e) {
            _this.error = e;
            return null;
        })
            .then(function (self) {
            if (!self && _this.dirtyFields().length === 0) {
                if (_this.id) {
                    _this.error = new errors_1.NotFoundError();
                }
                return null;
            }
            else if (_this.dirtyFields().length === 0) {
                return self;
            }
            else {
                var resolved = Model.resolveAndOverlay(_this.dirty, self || undefined);
                return mergeOptions({}, self || { id: _this.id, type: _this.type }, resolved);
            }
        });
    };
    Model.prototype.bulkGet = function () {
        return this.plump.bulkGet(this);
    };
    Model.prototype.save = function () {
        var _this = this;
        var update = mergeOptions({ id: this.id, type: this.type }, this.dirty);
        return this.plump
            .save(update)
            .then(function (updated) {
            _this.$$resetDirty();
            if (updated.id) {
                _this.id = updated.id;
            }
            return _this.get();
        })
            .catch(function (err) {
            throw err;
        });
    };
    Model.prototype.set = function (update) {
        var _this = this;
        var flat = update.attributes || update;
        var sanitized = Object.keys(flat)
            .filter(function (k) { return k in _this.schema.attributes; })
            .map(function (k) {
            return _a = {}, _a[k] = flat[k], _a;
            var _a;
        })
            .reduce(function (acc, curr) { return mergeOptions(acc, curr); }, {});
        this.$$copyValuesFrom(sanitized);
        this.$$fireUpdate();
        return this;
    };
    Model.prototype.asObservable = function (opts) {
        var _this = this;
        if (opts === void 0) { opts = ['relationships', 'attributes']; }
        var fields = Array.isArray(opts) ? opts.concat() : [opts];
        if (fields.indexOf('relationships') >= 0) {
            fields.splice(fields.indexOf('relationships'), 1);
            fields = fields.concat(Object.keys(this.schema.relationships).map(function (k) { return "relationships." + k; }));
        }
        var hots = this.plump.caches.filter(function (s) { return s.hot(_this); });
        var colds = this.plump.caches.filter(function (s) { return !s.hot(_this); });
        var terminal = this.plump.terminal;
        var preload$ = rxjs_1.Observable.from(hots)
            .flatMap(function (s) { return rxjs_1.Observable.fromPromise(s.read(_this, fields)); })
            .defaultIfEmpty(null)
            .flatMap(function (v) {
            if (v !== null && fields.every(function (f) { return plump_1.pathExists(v, f); })) {
                return rxjs_1.Observable.of(v);
            }
            else {
                var terminal$ = rxjs_1.Observable.fromPromise(terminal.read(_this, fields).then(function (terminalValue) {
                    if (terminalValue === null) {
                        throw new errors_1.NotFoundError();
                    }
                    else {
                        return terminalValue;
                    }
                }));
                var cold$ = rxjs_1.Observable.from(colds).flatMap(function (s) {
                    return rxjs_1.Observable.fromPromise(s.read(_this, fields));
                });
                return rxjs_1.Observable.merge(terminal$, cold$.takeUntil(terminal$));
            }
        });
        var watchWrite$ = terminal.write$
            .filter(function (v) {
            return (v.type === _this.type && v.id === _this.id);
        })
            .flatMapTo(rxjs_1.Observable.of(terminal).flatMap(function (s) {
            return rxjs_1.Observable.fromPromise(s.read(_this, fields, true));
        }))
            .startWith(null);
        return rxjs_1.Observable.combineLatest(rxjs_1.Observable.of(this.empty(this.id)), preload$, watchWrite$, this._write$.asObservable().startWith(null))
            .map(function (a) { return condMerge(a); })
            .map(function (v) {
            v.relationships = Model.resolveRelationships(_this.dirty.relationships, v.relationships);
            return v;
        })
            .distinctUntilChanged(deepEqual);
    };
    Model.prototype.delete = function () {
        return this.plump.delete(this);
    };
    Model.prototype.add = function (key, item) {
        var toAdd = Object.assign({}, { type: this.schema.relationships[key].type.sides[key].otherType }, item);
        if (key in this.schema.relationships) {
            if (item.id >= 1) {
                if (this.dirty.relationships[key] === undefined) {
                    this.dirty.relationships[key] = [];
                }
                this.dirty.relationships[key].push({
                    op: 'add',
                    data: toAdd,
                });
                this.$$fireUpdate(true);
                return this;
            }
            else {
                throw new Error('Invalid item added to hasMany');
            }
        }
        else {
            throw new Error('Cannot $add except to hasMany field');
        }
    };
    Model.prototype.modifyRelationship = function (key, item) {
        var toAdd = Object.assign({}, { type: this.schema.relationships[key].type.sides[key].otherType }, item);
        if (key in this.schema.relationships) {
            if (item.id >= 1) {
                this.dirty.relationships[key] = this.dirty.relationships[key] || [];
                this.dirty.relationships[key].push({
                    op: 'modify',
                    data: toAdd,
                });
                this.$$fireUpdate(true);
                return this;
            }
            else {
                throw new Error('Invalid item added to hasMany');
            }
        }
        else {
            throw new Error('Cannot $add except to hasMany field');
        }
    };
    Model.prototype.remove = function (key, item) {
        var toAdd = Object.assign({}, { type: this.schema.relationships[key].type.sides[key].otherType }, item);
        if (key in this.schema.relationships) {
            if (item.id >= 1) {
                if (!(key in this.dirty.relationships)) {
                    this.dirty.relationships[key] = [];
                }
                this.dirty.relationships[key].push({
                    op: 'remove',
                    data: toAdd,
                });
                this.$$fireUpdate(true);
                return this;
            }
            else {
                throw new Error('Invalid item $removed from hasMany');
            }
        }
        else {
            throw new Error('Cannot $remove except from hasMany field');
        }
    };
    Model.applyDelta = function (current, delta) {
        if (delta.op === 'add' || delta.op === 'modify') {
            var retVal = mergeOptions({}, current, delta.data);
            return retVal;
        }
        else if (delta.op === 'remove') {
            return undefined;
        }
        else {
            return current;
        }
    };
    Model.resolveAndOverlay = function (update, base) {
        if (base === void 0) { base = {
            attributes: {},
            relationships: {},
        }; }
        var attributes = mergeOptions({}, base.attributes, update.attributes);
        var resolvedRelationships = this.resolveRelationships(update.relationships, base.relationships);
        return { attributes: attributes, relationships: resolvedRelationships };
    };
    Model.resolveRelationships = function (deltas, base) {
        var _this = this;
        if (base === void 0) { base = {}; }
        var updates = Object.keys(deltas)
            .map(function (relName) {
            var resolved = _this.resolveRelationship(deltas[relName], base[relName]);
            return _a = {}, _a[relName] = resolved, _a;
            var _a;
        })
            .reduce(function (acc, curr) { return mergeOptions(acc, curr); }, {});
        return mergeOptions({}, base, updates);
    };
    Model.resolveRelationship = function (deltas, base) {
        if (base === void 0) { base = []; }
        var retVal = base.concat();
        deltas.forEach(function (delta) {
            if (delta.op === 'add' || delta.op === 'modify') {
                var currentIndex = retVal.findIndex(function (v) { return v.id === delta.data.id; });
                if (currentIndex >= 0) {
                    retVal[currentIndex] = delta.data;
                }
                else {
                    retVal.push(delta.data);
                }
            }
            else if (delta.op === 'remove') {
                var currentIndex = retVal.findIndex(function (v) { return v.id === delta.data.id; });
                if (currentIndex >= 0) {
                    retVal.splice(currentIndex, 1);
                }
            }
        });
        return retVal;
    };
    Model.type = 'BASE';
    Model.schema = {
        idAttribute: 'id',
        name: 'BASE',
        attributes: {},
        relationships: {},
    };
    return Model;
}());
exports.Model = Model;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
