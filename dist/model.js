
            var retVal = {};
            for (var k in _this6[$store]) {
              if (_this6.constructor.$fields[k].type !== 'hasMany') {
                retVal[k] = _this6[$store][k];
              }
            }
            return retVal;
            var _retVal = {};
            for (var _k in _this6[$store]) {
              if (_this6.constructor.$fields[_k].type !== 'hasMany') {
                _retVal[_k] = _this6[$store][_k];
              }
            }
            return _retVal;
      }
    }
  }, {
    key: '$name',
    get: function get() {
      return this.constructor.$name;
    }
  }, {
    key: '$id',
    get: function get() {
      return this[$store][this.constructor.$id];
    }
  }]);

  return Model;
}();

Model.fromJSON = function fromJSON(json) {
  var _this12 = this;

  this.$id = json.$id || 'id';
  this.$name = json.$name;
  this.$fields = {};
  Object.keys(json.$fields).forEach(function (k) {
    var field = json.$fields[k];
    if (field.type === 'hasMany') {
      var DynamicRelationship = function (_Relationship) {
        _inherits(DynamicRelationship, _Relationship);

        function DynamicRelationship() {
          _classCallCheck(this, DynamicRelationship);

          return _possibleConstructorReturn(this, (DynamicRelationship.__proto__ || Object.getPrototypeOf(DynamicRelationship)).apply(this, arguments));
        }

        return DynamicRelationship;
      }(_relationship.Relationship);

      DynamicRelationship.fromJSON(field.relationship);
      _this12.$fields[k] = {
        type: 'hasMany',
        relationship: DynamicRelationship
      };
    } else {
      _this12.$fields[k] = Object.assign({}, field);
    }
  });
};

Model.toJSON = function toJSON() {
  var _this13 = this;

  var retVal = {
    $id: this.$id,
    $name: this.$name,
    $fields: {}
  };
  var fieldNames = Object.keys(this.$fields);
  fieldNames.forEach(function (k) {
    if (_this13.$fields[k].type === 'hasMany') {
      retVal.$fields[k] = {
        type: 'hasMany',
        relationship: _this13.$fields[k].relationship.toJSON()
      };
    } else {
      retVal.$fields[k] = _this13.$fields[k];
    }
  });
  return retVal;
};

Model.$rest = function $rest(plump, opts) {
  var restOpts = Object.assign({}, opts, {
    url: '/' + this.$name + '/' + opts.url
  });
  return plump.restRequest(restOpts);
};

Model.assign = function assign(opts) {
  var _this14 = this;

  var start = {};
  Object.keys(this.$fields).forEach(function (key) {
    if (opts[key]) {
      start[key] = opts[key];
    } else if (_this14.$fields[key].default) {
      start[key] = _this14.$fields[key].default;
    } else if (_this14.$fields[key].type === 'hasMany') {
      start[key] = [];
    } else {
      start[key] = null;
    }
  });
  return start;
};

Model.$id = 'id';
Model.$name = 'Base';
Model.$self = $self;
Model.$fields = {
  id: {
    type: 'number'
  }
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZGVsLmpzIl0sIm5hbWVzIjpbIiRzdG9yZSIsIlN5bWJvbCIsIiRwbHVtcCIsIiRsb2FkZWQiLCIkdW5zdWJzY3JpYmUiLCIkc3ViamVjdCIsIiRzZWxmIiwiJGFsbCIsIk1vZGVsIiwib3B0cyIsInBsdW1wIiwiJHJlbGF0aW9uc2hpcHMiLCJuZXh0IiwiT2JqZWN0Iiwia2V5cyIsImNvbnN0cnVjdG9yIiwiJGZpZWxkcyIsImZvckVhY2giLCJrZXkiLCJ0eXBlIiwiUmVsIiwicmVsYXRpb25zaGlwIiwiZGVmYXVsdCIsIiQkY29weVZhbHVlc0Zyb20iLCJmaWVsZE5hbWUiLCJ1bmRlZmluZWQiLCJjb25jYXQiLCJhc3NpZ24iLCIkJGZpcmVVcGRhdGUiLCJzdWJzY3JpYmUiLCIkbmFtZSIsIiRpZCIsImZpZWxkIiwidmFsdWUiLCJmaWVsZHMiLCJjYiIsImxlbmd0aCIsIkFycmF5IiwiaXNBcnJheSIsIiQkaG9va1RvUGx1bXAiLCJzdHJlYW1HZXQiLCJ2Iiwib3B0aW9ucyIsImRvbWFpbiIsImFwaVBhdGgiLCJwcmVmaXgiLCIkZ2V0IiwiJHBhY2thZ2VJbmNsdWRlcyIsInRoZW4iLCJpbmZsYXRlZCIsInJlc29sdmUiLCJtYXAiLCJhbGwiLCJyZWwiLCJvdGhlclNpZGUiLCIkc2lkZXMiLCJvdGhlciIsImZpbmQiLCIkJHBhY2thZ2VGb3JJbmNsdXNpb24iLCJjaGlsZFBrZ3MiLCJhdHRyaWJ1dGVzIiwiZmlsdGVyIiwiayIsImluZGV4T2YiLCJhdHRyaWJ1dGUiLCJyZWxhdGlvbnNoaXBzIiwiaW5kZXgiLCJsaW5rcyIsInJlbGF0ZWQiLCJkYXRhIiwiY2hpbGRQa2ciLCJpZCIsInNlbGYiLCJpbmNsdWRlZCIsImNoaWxkUGtnTm9JbmNsdWRlIiwicHVzaCIsInBrZyIsIiQkc2luZ2xlR2V0IiwidmFsdWVBcnJheSIsInNlbGZJZHgiLCJyZWR1Y2UiLCJhY2N1bSIsImN1cnIiLCJvcHQiLCJnZXQiLCIkbGlzdCIsIiRzZXQiLCJ1IiwidXBkYXRlIiwic2F2ZSIsInVwZGF0ZWQiLCJkZWxldGUiLCJyZXN0T3B0cyIsInVybCIsInJlc3RSZXF1ZXN0IiwiaXRlbSIsImV4dHJhcyIsImFkZCIsInJlamVjdCIsIkVycm9yIiwibCIsIm1vZGlmeVJlbGF0aW9uc2hpcCIsInJlbW92ZSIsInVuc3Vic2NyaWJlIiwiZnJvbUpTT04iLCJqc29uIiwiRHluYW1pY1JlbGF0aW9uc2hpcCIsInRvSlNPTiIsInJldFZhbCIsImZpZWxkTmFtZXMiLCIkcmVzdCIsInN0YXJ0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7Ozs7Ozs7OztBQUNBLElBQU1BLFNBQVNDLE9BQU8sUUFBUCxDQUFmO0FBQ0EsSUFBTUMsU0FBU0QsT0FBTyxRQUFQLENBQWY7QUFDQSxJQUFNRSxVQUFVRixPQUFPLFNBQVAsQ0FBaEI7QUFDQSxJQUFNRyxlQUFlSCxPQUFPLGNBQVAsQ0FBckI7QUFDQSxJQUFNSSxXQUFXSixPQUFPLFVBQVAsQ0FBakI7QUFDTyxJQUFNSyx3QkFBUUwsT0FBTyxPQUFQLENBQWQ7QUFDQSxJQUFNTSxzQkFBT04sT0FBTyxNQUFQLENBQWI7O0FBRVA7QUFDQTs7SUFFYU8sSyxXQUFBQSxLO0FBQ1gsaUJBQVlDLElBQVosRUFBa0JDLEtBQWxCLEVBQXlCO0FBQUE7O0FBQUE7O0FBQ3ZCLFNBQUtWLE1BQUwsSUFBZSxFQUFmO0FBQ0EsU0FBS1csY0FBTCxHQUFzQixFQUF0QjtBQUNBLFNBQUtOLFFBQUwsSUFBaUIseUJBQWpCO0FBQ0EsU0FBS0EsUUFBTCxFQUFlTyxJQUFmLENBQW9CLEVBQXBCO0FBQ0EsU0FBS1QsT0FBTCx3QkFDR0csS0FESCxFQUNXLEtBRFg7QUFHQU8sV0FBT0MsSUFBUCxDQUFZLEtBQUtDLFdBQUwsQ0FBaUJDLE9BQTdCLEVBQXNDQyxPQUF0QyxDQUE4QyxVQUFDQyxHQUFELEVBQVM7QUFDckQsVUFBSSxNQUFLSCxXQUFMLENBQWlCQyxPQUFqQixDQUF5QkUsR0FBekIsRUFBOEJDLElBQTlC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U0FBT25GLE1BQU1vRixXQUFOLENBQWtCRixRQUFsQixDQUFQO0FBQ0QsQ0FURDs7QUFXQXBGLE1BQU1tQixNQUFOLEdBQWUsU0FBU0EsTUFBVCxDQUFnQmxCLElBQWhCLEVBQXNCO0FBQUE7O0FBQ25DLE1BQU1zRyxRQUFRLEVBQWQ7QUFDQWxHLFNBQU9DLElBQVAsQ0FBWSxLQUFLRSxPQUFqQixFQUEwQkMsT0FBMUIsQ0FBa0MsVUFBQ0MsR0FBRCxFQUFTO0FBQ3pDLFFBQUlULEtBQUtTLEdBQUwsQ0FBSixFQUFlO0FBQ2I2RixZQUFNN0YsR0FBTixJQUFhVCxLQUFLUyxHQUFMLENBQWI7QUFDRCxLQUZELE1BRU8sSUFBSSxRQUFLRixPQUFMLENBQWFFLEdBQWIsRUFBa0JJLE9BQXRCLEVBQStCO0FBQ3BDeUYsWUFBTTdGLEdBQU4sSUFBYSxRQUFLRixPQUFMLENBQWFFLEdBQWIsRUFBa0JJLE9BQS9CO0FBQ0QsS0FGTSxNQUVBLElBQUksUUFBS04sT0FBTCxDQUFhRSxHQUFiLEVBQWtCQyxJQUFsQixLQUEyQixTQUEvQixFQUEwQztBQUMvQzRGLFlBQU03RixHQUFOLElBQWEsRUFBYjtBQUNELEtBRk0sTUFFQTtBQUNMNkYsWUFBTTdGLEdBQU4sSUFBYSxJQUFiO0FBQ0Q7QUFDRixHQVZEO0FBV0EsU0FBTzZGLEtBQVA7QUFDRCxDQWREOztBQWdCQXZHLE1BQU11QixHQUFOLEdBQVksSUFBWjtBQUNBdkIsTUFBTXNCLEtBQU4sR0FBYyxNQUFkO0FBQ0F0QixNQUFNRixLQUFOLEdBQWNBLEtBQWQ7QUFDQUUsTUFBTVEsT0FBTixHQUFnQjtBQUNkdUQsTUFBSTtBQUNGcEQsVUFBTTtBQURKO0FBRFUsQ0FBaEIiLCJmaWxlIjoibW9kZWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQmx1ZWJpcmQgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IHsgUmVsYXRpb25zaGlwIH0gZnJvbSAnLi9yZWxhdGlvbnNoaXAnO1xuaW1wb3J0IG1lcmdlT3B0aW9ucyBmcm9tICdtZXJnZS1vcHRpb25zJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMvUngnO1xuY29uc3QgJHN0b3JlID0gU3ltYm9sKCckc3RvcmUnKTtcbmNvbnN0ICRwbHVtcCA9IFN5bWJvbCgnJHBsdW1wJyk7XG5jb25zdCAkbG9hZGVkID0gU3ltYm9sKCckbG9hZGVkJyk7XG5jb25zdCAkdW5zdWJzY3JpYmUgPSBTeW1ib2woJyR1bnN1YnNjcmliZScpO1xuY29uc3QgJHN1YmplY3QgPSBTeW1ib2woJyRzdWJqZWN0Jyk7XG5leHBvcnQgY29uc3QgJHNlbGYgPSBTeW1ib2woJyRzZWxmJyk7XG5leHBvcnQgY29uc3QgJGFsbCA9IFN5bWJvbCgnJGFsbCcpO1xuXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHdoZXJlIGVycm9yIGV2ZW50cyBvcmlnaW5hdGUgKHN0b3JhZ2Ugb3IgbW9kZWwpXG4vLyBhbmQgd2hvIGtlZXBzIGEgcm9sbC1iYWNrYWJsZSBkZWx0YVxuXG5leHBvcnQgY2xhc3MgTW9kZWwge1xuICBjb25zdHJ1Y3RvcihvcHRzLCBwbHVtcCkge1xuICAgIHRoaXNbJHN0b3JlXSA9IHt9O1xuICAgIHRoaXMuJHJlbGF0aW9uc2hpcHMgPSB7fTtcbiAgICB0aGlzWyRzdWJqZWN0XSA9IG5ldyBCZWhhdmlvclN1YmplY3QoKTtcbiAgICB0aGlzWyRzdWJqZWN0XS5uZXh0KHt9KTtcbiAgICB0aGlzWyRsb2FkZWRdID0ge1xuICAgICAgWyRzZWxmXTogZmFsc2UsXG4gICAgfTtcbiAgICBPYmplY3Qua2V5cyh0aGlzLmNvbnN0cnVjdG9yLiRmaWVsZHMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgaWYgKHRoaXMuY29uc3RydWN0b3IuJGZpZWxkc1trZXldLnR5cGUgPT09ICdoYXNNYW55Jykge1xuICAgICAgICBjb25zdCBSZWwgPSB0aGlzLmNvbnN0cnVjdG9yLiRmaWVsZHNba2V5XS5yZWxhdGlvbnNoaXA7XG4gICAgICAgIHRoaXMuJHJlbGF0aW9uc2hpcHNba2V5XSA9IG5ldyBSZWwodGhpcywga2V5LCBwbHVtcCk7XG4gICAgICAgIHRoaXNbJHN0b3JlXVtrZXldID0gW107XG4gICAgICAgIHRoaXNbJGxvYWRlZF1ba2V5XSA9IGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpc1skc3RvcmVdW2tleV0gPSB0aGlzLmNvbnN0cnVjdG9yLiRmaWVsZHNba2V5XS5kZWZhdWx0IHx8IG51bGw7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy4kJGNvcHlWYWx1ZXNGcm9tKG9wdHMgfHwge30pO1xuICAgIGlmIChwbHVtcCkge1xuICAgICAgdGhpc1skcGx1bXBdID0gcGx1bXA7XG4gICAgfVxuICB9XG5cbiAgZ2V0ICRuYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLiRuYW1lO1xuICB9XG5cbiAgZ2V0ICRpZCgpIHtcbiAgICByZXR1cm4gdGhpc1skc3RvcmVdW3RoaXMuY29uc3RydWN0b3IuJGlkXTtcbiAgfVxuXG4gICQkY29weVZhbHVlc0Zyb20ob3B0cyA9IHt9KSB7XG4gICAgT2JqZWN0LmtleXModGhpcy5jb25zdHJ1Y3Rvci4kZmllbGRzKS5mb3JFYWNoKChmaWVsZE5hbWUpID0+IHtcbiAgICAgIGlmIChvcHRzW2ZpZWxkTmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBjb3B5IGZyb20gb3B0cyB0byB0aGUgYmVzdCBvZiBvdXIgYWJpbGl0eVxuICAgICAgICBpZiAoXG4gICAgICAgICAgKHRoaXMuY29uc3RydWN0b3IuJGZpZWxkc1tmaWVsZE5hbWVdLnR5cGUgPT09ICdhcnJheScpIHx8XG4gICAgICAgICAgKHRoaXMuY29uc3RydWN0b3IuJGZpZWxkc1tmaWVsZE5hbWVdLnR5cGUgPT09ICdoYXNNYW55JylcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhpc1skc3RvcmVdW2ZpZWxkTmFtZV0gPSAob3B0c1tmaWVsZE5hbWVdIHx8IFtdKS5jb25jYXQoKTtcbiAgICAgICAgICB0aGlzWyRsb2FkZWRdW2ZpZWxkTmFtZV0gPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuY29uc3RydWN0b3IuJGZpZWxkc1tmaWVsZE5hbWVdLnR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgdGhpc1skc3RvcmVdW2ZpZWxkTmFtZV0gPSBPYmplY3QuYXNzaWduKHt9LCBvcHRzW2ZpZWxkTmFtZV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXNbJHN0b3JlXVtmaWVsZE5hbWVdID0gb3B0c1tmaWVsZE5hbWVdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy4kJGZpcmVVcGRhdGUoKTtcbiAgfVxuXG4gICQkaG9va1RvUGx1bXAoKSB7XG4gICAgaWYgKHRoaXNbJHVuc3Vic2NyaWJlXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzWyR1bnN1YnNjcmliZV0gPSB0aGlzWyRwbHVtcF0uc3Vic2NyaWJlKHRoaXMuY29uc3RydWN0b3IuJG5hbWUsIHRoaXMuJGlkLCAoeyBmaWVsZCwgdmFsdWUgfSkgPT4ge1xuICAgICAgICBpZiAoZmllbGQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIC8vIHRoaXMuJCRjb3B5VmFsdWVzRnJvbSh2YWx1ZSk7XG4gICAgICAgICAgdGhpcy4kJGNvcHlWYWx1ZXNGcm9tKHsgW2ZpZWxkXTogdmFsdWUgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy4kJGNvcHlWYWx1ZXNGcm9tKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgJHN1YnNjcmliZSguLi5hcmdzKSB7XG4gICAgbGV0IGZpZWxkcyA9IFskc2VsZl07XG4gICAgbGV0IGNiO1xuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMikge1xuICAgICAgZmllbGRzID0gYXJnc1swXTtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShmaWVsZHMpKSB7XG4gICAgICAgIGZpZWxkcyA9IFtmaWVsZHNdO1xuICAgICAgfVxuICAgICAgY2IgPSBhcmdzWzFdO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYiA9IGFyZ3NbMF07XG4gICAgfVxuICAgIHRoaXMuJCRob29rVG9QbHVtcCgpO1xuICAgIGlmICh0aGlzWyRsb2FkZWRdWyRzZWxmXSA9PT0gZmFsc2UpIHtcbiAgICAgIHRoaXNbJHBsdW1wXS5zdHJlYW1HZXQodGhpcy5jb25zdHJ1Y3RvciwgdGhpcy4kaWQsIGZpZWxkcylcbiAgICAgIC5zdWJzY3JpYmUoKHYpID0+IHRoaXMuJCRjb3B5VmFsdWVzRnJvbSh2KSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzWyRzdWJqZWN0XS5zdWJzY3JpYmUoY2IpO1xuICB9XG5cbiAgJCRmaXJlVXBkYXRlKCkge1xuICAgIHRoaXNbJHN1YmplY3RdLm5leHQodGhpc1skc3RvcmVdKTtcbiAgfVxuXG4gICQkcGFja2FnZUZvckluY2x1c2lvbihvcHRzKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oXG4gICAgICB7fSxcbiAgICAgIHtcbiAgICAgICAgZG9tYWluOiAnaHR0cHM6Ly9leGFtcGxlLmNvbScsXG4gICAgICAgIGFwaVBhdGg6ICcvYXBpJyxcbiAgICAgIH0sXG4gICAgICBvcHRzXG4gICAgKTtcbiAgICBjb25zdCBwcmVmaXggPSBgJHtvcHRpb25zLmRvbWFpbn0ke29wdGlvbnMuYXBpUGF0aH1gO1xuXG4gICAgcmV0dXJuIHRoaXMuJGdldChcbiAgICAgIHRoaXMuY29uc3RydWN0b3IuJHBhY2thZ2VJbmNsdWRlcy5jb25jYXQoJHNlbGYpXG4gICAgKS50aGVuKChpbmZsYXRlZCkgPT4ge1xuICAgICAgcmV0dXJuIEJsdWViaXJkLnJlc29sdmUoKS50aGVuKCgpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IuJHBhY2thZ2VJbmNsdWRlcy5tYXAoKHJlbGF0aW9uc2hpcCkgPT4ge1xuICAgICAgICAgIHJldHVybiBCbHVlYmlyZC5hbGwoXG4gICAgICAgICAgICBpbmZsYXRlZFtyZWxhdGlvbnNoaXBdLm1hcCgocmVsKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IG90aGVyU2lkZSA9IHRoaXMuY29uc3RydWN0b3IuJGZpZWxkc1tyZWxhdGlvbnNoaXBdLnJlbGF0aW9uc2hpcC4kc2lkZXNbcmVsYXRpb25zaGlwXS5vdGhlcjtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbJHBsdW1wXS5maW5kKFxuICAgICAgICAgICAgICAgIG90aGVyU2lkZS50eXBlLFxuICAgICAgICAgICAgICAgIHJlbFtvdGhlclNpZGUuZmllbGRdXG4gICAgICAgICAgICAgICkuJCRwYWNrYWdlRm9ySW5jbHVzaW9uKCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgfSkudGhlbigoY2hpbGRQa2dzKSA9PiB7XG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSB7fTtcbiAgICAgICAgT2JqZWN0LmtleXMoaW5mbGF0ZWQpLmZpbHRlcihrID0+IGsgIT09ICdpZCcgJiYgKHRoaXMuY29uc3RydWN0b3IuJHBhY2thZ2VJbmNsdWRlcy5pbmRleE9mKGspIDwgMCkpXG4gICAgICAgIC5mb3JFYWNoKChhdHRyaWJ1dGUpID0+IHtcbiAgICAgICAgICBhdHRyaWJ1dGVzW2F0dHJpYnV0ZV0gPSBpbmZsYXRlZFthdHRyaWJ1dGVdO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBjb25zdCBpbmNsdWRlZCA9IFtdO1xuICAgICAgICBjb25zdCByZWxhdGlvbnNoaXBzID0ge307XG4gICAgICAgIHRoaXMuY29uc3RydWN0b3IuJHBhY2thZ2VJbmNsdWRlcy5mb3JFYWNoKChyZWxhdGlvbnNoaXAsIGluZGV4KSA9PiB7XG4gICAgICAgICAgcmVsYXRpb25zaGlwc1tyZWxhdGlvbnNoaXBdID0ge1xuICAgICAgICAgICAgbGlua3M6IHtcbiAgICAgICAgICAgICAgcmVsYXRlZDogYCR7cHJlZml4fS8ke3RoaXMuY29uc3RydWN0b3IuJG5hbWV9LyR7dGhpcy4kaWR9LyR7cmVsYXRpb25zaGlwfWAsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGF0YTogY2hpbGRQa2dzW2luZGV4XS5tYXAoKGNoaWxkUGtnKSA9PiB7XG4gICAgICAgICAgICAgIC8vIGNvbnN0IGNoaWxkUGtnTm9JbmNsdWRlID0ge307XG4gICAgICAgICAgICAgIC8vIE9iamVjdC5rZXlzKGNoaWxkUGtnKS5maWx0ZXIoayA9PiBrICE9PSAnaW5jbHVkZWQnKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICAgICAgLy8gICBjaGlsZFBrZ05vSW5jbHVkZVtrZXldID0gY2hpbGRQa2dba2V5XTtcbiAgICAgICAgICAgICAgLy8gfSk7XG4gICAgICAgICAgICAgIC8vIGluY2x1ZGVkLnB1c2goY2hpbGRQa2dOb0luY2x1ZGUpO1xuICAgICAgICAgICAgICAvLyBjaGlsZFBrZy5pbmNsdWRlZC5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgIC8vICAgaW5jbHVkZWQucHVzaChpdGVtKTtcbiAgICAgICAgICAgICAgLy8gfSk7XG4gICAgICAgICAgICAgIHJldHVybiB7IHR5cGU6IGNoaWxkUGtnLnR5cGUsIGlkOiBjaGlsZFBrZy5pZCB9O1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0eXBlOiB0aGlzLmNvbnN0cnVjdG9yLiRuYW1lLFxuICAgICAgICAgIGlkOiB0aGlzLiRpZCxcbiAgICAgICAgICBhdHRyaWJ1dGVzOiBhdHRyaWJ1dGVzLFxuICAgICAgICAgIHJlbGF0aW9uc2hpcHM6IHJlbGF0aW9uc2hpcHMsXG4gICAgICAgICAgbGlua3M6IHtcbiAgICAgICAgICAgIHNlbGY6IGAke3ByZWZpeH0vJHt0aGlzLmNvbnN0cnVjdG9yLiRuYW1lfS8ke3RoaXMuJGlkfWAsXG4gICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgJHBhY2thZ2Uob3B0cykge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKFxuICAgICAge30sXG4gICAgICB7XG4gICAgICAgIGRvbWFpbjogJ2h0dHBzOi8vZXhhbXBsZS5jb20nLFxuICAgICAgICBhcGlQYXRoOiAnL2FwaScsXG4gICAgICB9LFxuICAgICAgb3B0c1xuICAgICk7XG4gICAgY29uc3QgcHJlZml4ID0gYCR7b3B0aW9ucy5kb21haW59JHtvcHRpb25zLmFwaVBhdGh9YDtcblxuICAgIHJldHVybiB0aGlzLiRnZXQoXG4gICAgICB0aGlzLmNvbnN0cnVjdG9yLiRwYWNrYWdlSW5jbHVkZXMuY29uY2F0KCRzZWxmKVxuICAgIClcbiAgICAudGhlbigoaW5mbGF0ZWQpID0+IHtcbiAgICAgIHJldHVybiBCbHVlYmlyZC5yZXNvbHZlKCkudGhlbigoKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLiRwYWNrYWdlSW5jbHVkZXMubWFwKChyZWxhdGlvbnNoaXApID0+IHtcbiAgICAgICAgICByZXR1cm4gQmx1ZWJpcmQuYWxsKFxuICAgICAgICAgICAgaW5mbGF0ZWRbcmVsYXRpb25zaGlwXS5tYXAoKHJlbCkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBvdGhlclNpZGUgPSB0aGlzLmNvbnN0cnVjdG9yLiRmaWVsZHNbcmVsYXRpb25zaGlwXS5yZWxhdGlvbnNoaXAuJHNpZGVzW3JlbGF0aW9uc2hpcF0ub3RoZXI7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzWyRwbHVtcF0uZmluZChcbiAgICAgICAgICAgICAgICBvdGhlclNpZGUudHlwZSxcbiAgICAgICAgICAgICAgICByZWxbb3RoZXJTaWRlLmZpZWxkXVxuICAgICAgICAgICAgICApLiQkcGFja2FnZUZvckluY2x1c2lvbigpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgIH0pLnRoZW4oKGNoaWxkUGtncykgPT4ge1xuICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0ge307XG4gICAgICAgIE9iamVjdC5rZXlzKGluZmxhdGVkKS5maWx0ZXIoayA9PiBrICE9PSAnaWQnICYmICh0aGlzLmNvbnN0cnVjdG9yLiRwYWNrYWdlSW5jbHVkZXMuaW5kZXhPZihrKSA8IDApKVxuICAgICAgICAuZm9yRWFjaCgoYXR0cmlidXRlKSA9PiB7XG4gICAgICAgICAgYXR0cmlidXRlc1thdHRyaWJ1dGVdID0gaW5mbGF0ZWRbYXR0cmlidXRlXTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgaW5jbHVkZWQgPSBbXTtcbiAgICAgICAgY29uc3QgcmVsYXRpb25zaGlwcyA9IHt9O1xuICAgICAgICB0aGlzLmNvbnN0cnVjdG9yLiRwYWNrYWdlSW5jbHVkZXMuZm9yRWFjaCgocmVsYXRpb25zaGlwLCBpbmRleCkgPT4ge1xuICAgICAgICAgIHJlbGF0aW9uc2hpcHNbcmVsYXRpb25zaGlwXSA9IHtcbiAgICAgICAgICAgIGxpbmtzOiB7XG4gICAgICAgICAgICAgIHJlbGF0ZWQ6IGAke3ByZWZpeH0vJHt0aGlzLmNvbnN0cnVjdG9yLiRuYW1lfS8ke3RoaXMuJGlkfS8ke3JlbGF0aW9uc2hpcH1gLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGE6IGNoaWxkUGtnc1tpbmRleF0ubWFwKChjaGlsZFBrZykgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBjaGlsZFBrZ05vSW5jbHVkZSA9IHt9O1xuICAgICAgICAgICAgICBPYmplY3Qua2V5cyhjaGlsZFBrZykuZmlsdGVyKGsgPT4gayAhPT0gJ2luY2x1ZGVkJykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgY2hpbGRQa2dOb0luY2x1ZGVba2V5XSA9IGNoaWxkUGtnW2tleV07XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBpbmNsdWRlZC5wdXNoKGNoaWxkUGtnTm9JbmNsdWRlKTtcbiAgICAgICAgICAgICAgLy8gY2hpbGRQa2cuaW5jbHVkZWQuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAvLyAgIGluY2x1ZGVkLnB1c2goaXRlbSk7XG4gICAgICAgICAgICAgIC8vIH0pO1xuICAgICAgICAgICAgICByZXR1cm4geyB0eXBlOiBjaGlsZFBrZy50eXBlLCBpZDogY2hpbGRQa2cuaWQgfTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHBrZyA9IHtcbiAgICAgICAgICBsaW5rczoge1xuICAgICAgICAgICAgc2VsZjogYCR7cHJlZml4fS8ke3RoaXMuY29uc3RydWN0b3IuJG5hbWV9LyR7dGhpcy4kaWR9YCxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHR5cGU6IHRoaXMuY29uc3RydWN0b3IuJG5hbWUsXG4gICAgICAgICAgICBpZDogdGhpcy4kaWQsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBhdHRyaWJ1dGVzOiBhdHRyaWJ1dGVzLFxuICAgICAgICAgIHJlbGF0aW9uc2hpcHM6IHJlbGF0aW9uc2hpcHMsXG4gICAgICAgICAgaW5jbHVkZWQ6IGluY2x1ZGVkLFxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBwa2c7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIFRPRE86IGRvbid0IGZldGNoIGlmIHdlICRnZXQoKSBzb21ldGhpbmcgdGhhdCB3ZSBhbHJlYWR5IGhhdmVcblxuICAkZ2V0KG9wdHMpIHtcbiAgICBsZXQga2V5cyA9IFskc2VsZl07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob3B0cykpIHtcbiAgICAgIGtleXMgPSBvcHRzO1xuICAgIH0gZWxzZSBpZiAob3B0cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBrZXlzID0gW29wdHNdO1xuICAgIH1cbiAgICByZXR1cm4gQmx1ZWJpcmQuYWxsKGtleXMubWFwKChrZXkpID0+IHRoaXMuJCRzaW5nbGVHZXQoa2V5KSkpXG4gICAgLnRoZW4oKHZhbHVlQXJyYXkpID0+IHtcbiAgICAgIGNvbnN0IHNlbGZJZHggPSBrZXlzLmluZGV4T2YoJHNlbGYpO1xuICAgICAgaWYgKChzZWxmSWR4ID49IDApICYmICh2YWx1ZUFycmF5W3NlbGZJZHhdID09PSBudWxsKSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB2YWx1ZUFycmF5LnJlZHVjZSgoYWNjdW0sIGN1cnIpID0+IE9iamVjdC5hc3NpZ24oYWNjdW0sIGN1cnIpLCB7fSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAkJHNpbmdsZUdldChvcHQgPSAkc2VsZikge1xuICAgIC8vIHRocmVlIGNhc2VzLlxuICAgIC8vIGtleSA9PT0gdW5kZWZpbmVkIC0gZmV0Y2ggYWxsLCB1bmxlc3MgJGxvYWRlZCwgYnV0IHJldHVybiBhbGwuXG4gICAgLy8gZmllbGRzW2tleV0gPT09ICdoYXNNYW55JyAtIGZldGNoIGNoaWxkcmVuIChwZXJoYXBzIG1vdmUgdGhpcyBkZWNpc2lvbiB0byBzdG9yZSlcbiAgICAvLyBvdGhlcndpc2UgLSBmZXRjaCBhbGwsIHVubGVzcyAkc3RvcmVba2V5XSwgcmV0dXJuICRzdG9yZVtrZXldLlxuICAgIGxldCBrZXk7XG4gICAgaWYgKChvcHQgIT09ICRzZWxmKSAmJiAodGhpcy5jb25zdHJ1Y3Rvci4kZmllbGRzW29wdF0udHlwZSAhPT0gJ2hhc01hbnknKSkge1xuICAgICAga2V5ID0gJHNlbGY7XG4gICAgfSBlbHNlIHtcbiAgICAgIGtleSA9IG9wdDtcbiAgICB9XG4gICAgcmV0dXJuIEJsdWViaXJkLnJlc29sdmUoKVxuICAgIC50aGVuKCgpID0+IHtcbiAgICAgIGlmIChrZXkgPT09ICRzZWxmKSB7XG4gICAgICAgIGlmICh0aGlzWyRsb2FkZWRdWyRzZWxmXSA9PT0gZmFsc2UgJiYgdGhpc1skcGx1bXBdKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXNbJHBsdW1wXS5nZXQodGhpcy5jb25zdHJ1Y3RvciwgdGhpcy4kaWQsIGtleSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICgodGhpc1skbG9hZGVkXVtrZXldID09PSBmYWxzZSkgJiYgdGhpc1skcGx1bXBdKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbG9uZWx5LWlmXG4gICAgICAgICAgcmV0dXJuIHRoaXMuJHJlbGF0aW9uc2hpcHNba2V5XS4kbGlzdCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSkudGhlbigodikgPT4ge1xuICAgICAgaWYgKHYgPT09IHRydWUpIHtcbiAgICAgICAgaWYgKGtleSA9PT0gJHNlbGYpIHtcbiAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgdGhpc1skc3RvcmVdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgeyBba2V5XTogdGhpc1skc3RvcmVdW2tleV0gfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodiAmJiAodlskc2VsZl0gIT09IG51bGwpKSB7XG4gICAgICAgIHRoaXMuJCRjb3B5VmFsdWVzRnJvbSh2KTtcbiAgICAgICAgdGhpc1skbG9hZGVkXVtrZXldID0gdHJ1ZTtcbiAgICAgICAgaWYgKGtleSA9PT0gJHNlbGYpIHtcbiAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgdGhpc1skc3RvcmVdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgeyBba2V5XTogdGhpc1skc3RvcmVdW2tleV0gfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgJHNhdmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuJHNldCgpO1xuICB9XG5cbiAgJHNldCh1ID0gdGhpc1skc3RvcmVdKSB7XG4gICAgY29uc3QgdXBkYXRlID0gbWVyZ2VPcHRpb25zKHt9LCB0aGlzWyRzdG9yZV0sIHUpO1xuICAgIE9iamVjdC5rZXlzKHRoaXMuY29uc3RydWN0b3IuJGZpZWxkcykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBpZiAodGhpcy5jb25zdHJ1Y3Rvci4kZmllbGRzW2tleV0udHlwZSA9PT0gJ2hhc01hbnknKSB7XG4gICAgICAgIGRlbGV0ZSB1cGRhdGVba2V5XTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICAvLyB0aGlzLiQkY29weVZhbHVlc0Zyb20odXBkYXRlKTsgLy8gdGhpcyBpcyB0aGUgb3B0aW1pc3RpYyB1cGRhdGU7XG4gICAgcmV0dXJuIHRoaXNbJHBsdW1wXS5zYXZlKHRoaXMuY29uc3RydWN0b3IsIHVwZGF0ZSlcbiAgICAudGhlbigodXBkYXRlZCkgPT4ge1xuICAgICAgdGhpcy4kJGNvcHlWYWx1ZXNGcm9tKHVwZGF0ZWQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSk7XG4gIH1cblxuICAkZGVsZXRlKCkge1xuICAgIHJldHVybiB0aGlzWyRwbHVtcF0uZGVsZXRlKHRoaXMuY29uc3RydWN0b3IsIHRoaXMuJGlkKTtcbiAgfVxuXG4gICRyZXN0KG9wdHMpIHtcbiAgICBjb25zdCByZXN0T3B0cyA9IE9iamVjdC5hc3NpZ24oXG4gICAgICB7fSxcbiAgICAgIG9wdHMsXG4gICAgICB7XG4gICAgICAgIHVybDogYC8ke3RoaXMuY29uc3RydWN0b3IuJG5hbWV9LyR7dGhpcy4kaWR9LyR7b3B0cy51cmx9YCxcbiAgICAgIH1cbiAgICApO1xuICAgIHJldHVybiB0aGlzWyRwbHVtcF0ucmVzdFJlcXVlc3QocmVzdE9wdHMpO1xuICB9XG5cbiAgJGFkZChrZXksIGl0ZW0sIGV4dHJhcykge1xuICAgIHJldHVybiBCbHVlYmlyZC5yZXNvbHZlKClcbiAgICAudGhlbigoKSA9PiB7XG4gICAgICBpZiAodGhpcy5jb25zdHJ1Y3Rvci4kZmllbGRzW2tleV0udHlwZSA9PT0gJ2hhc01hbnknKSB7XG4gICAgICAgIGxldCBpZCA9IDA7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICBpZCA9IGl0ZW07XG4gICAgICAgIH0gZWxzZSBpZiAoaXRlbS4kaWQpIHtcbiAgICAgICAgICBpZCA9IGl0ZW0uJGlkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlkID0gaXRlbVt0aGlzLmNvbnN0cnVjdG9yLiRmaWVsZHNba2V5XS5yZWxhdGlvbnNoaXAuJHNpZGVzW2tleV0ub3RoZXIuZmllbGRdO1xuICAgICAgICB9XG4gICAgICAgIGlmICgodHlwZW9mIGlkID09PSAnbnVtYmVyJykgJiYgKGlkID49IDEpKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXNbJHBsdW1wXS5hZGQodGhpcy5jb25zdHJ1Y3RvciwgdGhpcy4kaWQsIGtleSwgaWQsIGV4dHJhcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIEJsdWViaXJkLnJlamVjdChuZXcgRXJyb3IoJ0ludmFsaWQgaXRlbSBhZGRlZCB0byBoYXNNYW55JykpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gQmx1ZWJpcmQucmVqZWN0KG5ldyBFcnJvcignQ2Fubm90ICRhZGQgZXhjZXB0IHRvIGhhc01hbnkgZmllbGQnKSk7XG4gICAgICB9XG4gICAgfSkudGhlbigobCkgPT4ge1xuICAgICAgdGhpcy4kJGNvcHlWYWx1ZXNGcm9tKHsgW2tleV06IGwgfSk7XG4gICAgICByZXR1cm4gbDtcbiAgICB9KTtcbiAgfVxuXG4gICRtb2RpZnlSZWxhdGlvbnNoaXAoa2V5LCBpdGVtLCBleHRyYXMpIHtcbiAgICBpZiAodGhpcy5jb25zdHJ1Y3Rvci4kZmllbGRzW2tleV0udHlwZSA9PT0gJ2hhc01hbnknKSB7XG4gICAgICBsZXQgaWQgPSAwO1xuICAgICAgaWYgKHR5cGVvZiBpdGVtID09PSAnbnVtYmVyJykge1xuICAgICAgICBpZCA9IGl0ZW07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZCA9IGl0ZW0uJGlkO1xuICAgICAgfVxuICAgICAgaWYgKCh0eXBlb2YgaWQgPT09ICdudW1iZXInKSAmJiAoaWQgPj0gMSkpIHtcbiAgICAgICAgdGhpc1skc3RvcmVdW2tleV0gPSBbXTtcbiAgICAgICAgdGhpc1skbG9hZGVkXVtrZXldID0gZmFsc2U7XG4gICAgICAgIHJldHVybiB0aGlzWyRwbHVtcF0ubW9kaWZ5UmVsYXRpb25zaGlwKHRoaXMuY29uc3RydWN0b3IsIHRoaXMuJGlkLCBrZXksIGlkLCBleHRyYXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIEJsdWViaXJkLnJlamVjdChuZXcgRXJyb3IoJ0ludmFsaWQgaXRlbSBhZGRlZCB0byBoYXNNYW55JykpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gQmx1ZWJpcmQucmVqZWN0KG5ldyBFcnJvcignQ2Fubm90ICRhZGQgZXhjZXB0IHRvIGhhc01hbnkgZmllbGQnKSk7XG4gICAgfVxuICB9XG5cbiAgJHJlbW92ZShrZXksIGl0ZW0pIHtcbiAgICBpZiAodGhpcy5jb25zdHJ1Y3Rvci4kZmllbGRzW2tleV0udHlwZSA9PT0gJ2hhc01hbnknKSB7XG4gICAgICBsZXQgaWQgPSAwO1xuICAgICAgaWYgKHR5cGVvZiBpdGVtID09PSAnbnVtYmVyJykge1xuICAgICAgICBpZCA9IGl0ZW07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZCA9IGl0ZW0uJGlkO1xuICAgICAgfVxuICAgICAgaWYgKCh0eXBlb2YgaWQgPT09ICdudW1iZXInKSAmJiAoaWQgPj0gMSkpIHtcbiAgICAgICAgdGhpc1skc3RvcmVdW2tleV0gPSBbXTtcbiAgICAgICAgdGhpc1skbG9hZGVkXVtrZXldID0gZmFsc2U7XG4gICAgICAgIHJldHVybiB0aGlzWyRwbHVtcF0ucmVtb3ZlKHRoaXMuY29uc3RydWN0b3IsIHRoaXMuJGlkLCBrZXksIGlkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBCbHVlYmlyZC5yZWplY3QobmV3IEVycm9yKCdJbnZhbGlkIGl0ZW0gJHJlbW92ZWQgZnJvbSBoYXNNYW55JykpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gQmx1ZWJpcmQucmVqZWN0KG5ldyBFcnJvcignQ2Fubm90ICRyZW1vdmUgZXhjZXB0IGZyb20gaGFzTWFueSBmaWVsZCcpKTtcbiAgICB9XG4gIH1cblxuICAkdGVhcmRvd24oKSB7XG4gICAgaWYgKHRoaXNbJHVuc3Vic2NyaWJlXSkge1xuICAgICAgdGhpc1skdW5zdWJzY3JpYmVdLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuICB9XG59XG5cbk1vZGVsLmZyb21KU09OID0gZnVuY3Rpb24gZnJvbUpTT04oanNvbikge1xuICB0aGlzLiRpZCA9IGpzb24uJGlkIHx8ICdpZCc7XG4gIHRoaXMuJG5hbWUgPSBqc29uLiRuYW1lO1xuICB0aGlzLiRmaWVsZHMgPSB7fTtcbiAgT2JqZWN0LmtleXMoanNvbi4kZmllbGRzKS5mb3JFYWNoKChrKSA9PiB7XG4gICAgY29uc3QgZmllbGQgPSBqc29uLiRmaWVsZHNba107XG4gICAgaWYgKGZpZWxkLnR5cGUgPT09ICdoYXNNYW55Jykge1xuICAgICAgY2xhc3MgRHluYW1pY1JlbGF0aW9uc2hpcCBleHRlbmRzIFJlbGF0aW9uc2hpcCB7fVxuICAgICAgRHluYW1pY1JlbGF0aW9uc2hpcC5mcm9tSlNPTihmaWVsZC5yZWxhdGlvbnNoaXApO1xuICAgICAgdGhpcy4kZmllbGRzW2tdID0ge1xuICAgICAgICB0eXBlOiAnaGFzTWFueScsXG4gICAgICAgIHJlbGF0aW9uc2hpcDogRHluYW1pY1JlbGF0aW9uc2hpcCxcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuJGZpZWxkc1trXSA9IE9iamVjdC5hc3NpZ24oe30sIGZpZWxkKTtcbiAgICB9XG4gIH0pO1xufTtcblxuTW9kZWwudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICBjb25zdCByZXRWYWwgPSB7XG4gICAgJGlkOiB0aGlzLiRpZCxcbiAgICAkbmFtZTogdGhpcy4kbmFtZSxcbiAgICAkZmllbGRzOiB7fSxcbiAgfTtcbiAgY29uc3QgZmllbGROYW1lcyA9IE9iamVjdC5rZXlzKHRoaXMuJGZpZWxkcyk7XG4gIGZpZWxkTmFtZXMuZm9yRWFjaCgoaykgPT4ge1xuICAgIGlmICh0aGlzLiRmaWVsZHNba10udHlwZSA9PT0gJ2hhc01hbnknKSB7XG4gICAgICByZXRWYWwuJGZpZWxkc1trXSA9IHtcbiAgICAgICAgdHlwZTogJ2hhc01hbnknLFxuICAgICAgICByZWxhdGlvbnNoaXA6IHRoaXMuJGZpZWxkc1trXS5yZWxhdGlvbnNoaXAudG9KU09OKCksXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXRWYWwuJGZpZWxkc1trXSA9IHRoaXMuJGZpZWxkc1trXTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmV0VmFsO1xufTtcblxuTW9kZWwuJHJlc3QgPSBmdW5jdGlvbiAkcmVzdChwbHVtcCwgb3B0cykge1xuICBjb25zdCByZXN0T3B0cyA9IE9iamVjdC5hc3NpZ24oXG4gICAge30sXG4gICAgb3B0cyxcbiAgICB7XG4gICAgICB1cmw6IGAvJHt0aGlzLiRuYW1lfS8ke29wdHMudXJsfWAsXG4gICAgfVxuICApO1xuICByZXR1cm4gcGx1bXAucmVzdFJlcXVlc3QocmVzdE9wdHMpO1xufTtcblxuTW9kZWwuYXNzaWduID0gZnVuY3Rpb24gYXNzaWduKG9wdHMpIHtcbiAgY29uc3Qgc3RhcnQgPSB7fTtcbiAgT2JqZWN0LmtleXModGhpcy4kZmllbGRzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBpZiAob3B0c1trZXldKSB7XG4gICAgICBzdGFydFtrZXldID0gb3B0c1trZXldO1xuICAgIH0gZWxzZSBpZiAodGhpcy4kZmllbGRzW2tleV0uZGVmYXVsdCkge1xuICAgICAgc3RhcnRba2V5XSA9IHRoaXMuJGZpZWxkc1trZXldLmRlZmF1bHQ7XG4gICAgfSBlbHNlIGlmICh0aGlzLiRmaWVsZHNba2V5XS50eXBlID09PSAnaGFzTWFueScpIHtcbiAgICAgIHN0YXJ0W2tleV0gPSBbXTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhcnRba2V5XSA9IG51bGw7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHN0YXJ0O1xufTtcblxuTW9kZWwuJGlkID0gJ2lkJztcbk1vZGVsLiRuYW1lID0gJ0Jhc2UnO1xuTW9kZWwuJHNlbGYgPSAkc2VsZjtcbk1vZGVsLiRmaWVsZHMgPSB7XG4gIGlkOiB7XG4gICAgdHlwZTogJ251bWJlcicsXG4gIH0sXG59O1xuIl19
