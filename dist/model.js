"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var mergeOptions = require("merge-options");
var Rx_1 = require("rxjs/Rx");
var util_1 = require("./util");
// TODO: figure out where error events originate (storage or model)
// and who keeps a roll-backable delta
var Model = (function () {
    function Model(opts, plump) {
        this.plump = plump;
        // TODO: Define Delta interface
        this.dirty = {
            attributes: {},
            relationships: {},
        };
        this.$$copyValuesFrom(opts);
        // this.$$fireUpdate(opts);
    }
    Object.defineProperty(Model.prototype, "typeName", {
        get: function () {
            return this.constructor['typeName'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Model.prototype, "schema", {
        get: function () {
            return this.constructor['schema'];
        },
        enumerable: true,
        configurable: true
    });
    Model.prototype.dirtyFields = function () {
        var _this = this;
        return Object.keys(this.dirty.attributes)
            .filter(function (k) { return k !== _this.schema.idAttribute; })
            .concat(Object.keys(this.dirty.relationships));
    };
    Model.prototype.$$copyValuesFrom = function (opts) {
        if (opts === void 0) { opts = {}; }
        // const idField = this.constructor.$id in opts ? this.constructor.$id : 'id';
        // this[this.constructor.$id] = opts[idField] || this.id;
        if ((this.id === undefined) && (opts[this.schema.idAttribute])) {
            this.id = opts[this.schema.idAttribute];
        }
        this.dirty = mergeOptions(this.dirty, { attributes: opts });
    };
    Model.prototype.$$resetDirty = function () {
        this.dirty = {
            attributes: {},
            relationships: {},
        };
    };
    // $$fireUpdate(v) {
    //   const update = Model.resolveAndOverlay(this.dirty, v);
    //   if (this.id) {
    //     update.id = this.id;
    //   }
    //   this[$subject].next(update);
    // }
    // API METHODS
    Model.prototype.get = function (opts) {
        var _this = this;
        if (opts === void 0) { opts = 'attributes'; }
        // If opts is falsy (i.e., undefined), get attributes
        // Otherwise, get what was requested,
        // wrapping the request in a Array if it wasn't already one
        var keys = opts && !Array.isArray(opts) ? [opts] : opts;
        return this.plump.get(this, keys)
            .then(function (self) {
            if (!self && _this.dirtyFields().length === 0) {
                return null;
            }
            else if (_this.dirtyFields().length === 0) {
                return self;
            }
            else {
                var resolved = Model.resolveAndOverlay(_this.dirty, self || undefined);
                return mergeOptions({}, self || { id: _this.id, type: _this.typeName }, resolved);
            }
        });
    };
    Model.prototype.bulkGet = function () {
        return this.plump.bulkGet(this.constructor, this.id);
    };
    // TODO: Should $save ultimately return this.get()?
    Model.prototype.save = function () {
        var _this = this;
        var update = mergeOptions({ id: this.id, typeName: this.typeName }, this.dirty);
        return this.plump.save(update)
            .then(function (updated) {
            _this.$$resetDirty();
            if (updated.id) {
                _this.id = updated.id;
            }
            return _this.get();
        });
    };
    Model.prototype.set = function (update) {
        var _this = this;
        var flat = update.attributes || update;
        // Filter out non-attribute keys
        var sanitized = Object.keys(flat)
            .filter(function (k) { return k in _this.schema.attributes; })
            .map(function (k) {
            return _a = {}, _a[k] = flat[k], _a;
            var _a;
        })
            .reduce(function (acc, curr) { return mergeOptions(acc, curr); }, {});
        this.$$copyValuesFrom(sanitized);
        // this.$$fireUpdate(sanitized);
        return this;
    };
    Model.prototype.subscribe = function (arg1, arg2) {
        var _this = this;
        var fields = [];
        var cb = null;
        if (arg2) {
            cb = arg2;
            if (Array.isArray(arg1)) {
                fields = arg1;
            }
            else {
                fields = [arg1];
            }
        }
        else {
            cb = arg1;
            fields = ['attributes'];
        }
        if (fields.indexOf('relationships') >= 0) {
            fields = fields.concat(Object.keys(this.schema.relationships).map(function (k) { return "relationships." + k; }));
        }
        var hots = this.plump.storage.filter(function (s) { return s.hot(_this.typeName, _this.id); });
        var colds = this.plump.storage.filter(function (s) { return !s.hot(_this.typeName, _this.id); });
        var terminal = this.plump.terminal;
        var preload$ = Rx_1.Observable.from(hots)
            .flatMap(function (s) { return Rx_1.Observable.fromPromise(s.read(_this, fields)); })
            .defaultIfEmpty(null)
            .flatMap(function (v) {
            if (v !== null) {
                return Rx_1.Observable.of(v);
            }
            else {
                var terminal$ = Rx_1.Observable.of(terminal)
                    .flatMap(function (s) { return Rx_1.Observable.fromPromise(s.read(_this, fields)); })
                    .share();
                var cold$ = Rx_1.Observable.from(colds)
                    .flatMap(function (s) { return Rx_1.Observable.fromPromise(s.read(_this, fields)); });
                return Rx_1.Observable.merge(terminal$, cold$.takeUntil(terminal$));
            }
        });
        // TODO: cacheable reads
        // const watchRead$ = Observable.from(terminal)
        // .flatMap(s => s.read$.filter(v => v.type === this.typeName && v.id === this.id));
        var watchWrite$ = terminal.write$
            .filter(function (v) {
            return ((v.typeName === _this.typeName) &&
                (v.id === _this.id) &&
                (v.invalidate.some(function (i) { return fields.indexOf(i) >= 0; })));
        })
            .flatMapTo(Rx_1.Observable.of(terminal)
            .flatMap(function (s) { return Rx_1.Observable.fromPromise(s.read(_this, fields)); }));
        // );
        return preload$.merge(watchWrite$)
            .subscribe(cb);
    };
    Model.prototype.delete = function () {
        return this.plump.delete(this);
    };
    Model.prototype.$rest = function (opts) {
        var restOpts = Object.assign({}, opts, {
            url: "/" + this.constructor['type'] + "/" + this.id + "/" + opts.url,
        });
        return this.plump.restRequest(restOpts).then(function (res) { return res.data; });
    };
    Model.prototype.add = function (key, item) {
        if (key in this.schema.relationships) {
            if (item.id >= 1) {
                if (this.dirty.relationships[key] === undefined) {
                    this.dirty.relationships[key] = [];
                }
                this.dirty.relationships[key].push({
                    op: 'add',
                    data: item,
                });
                // this.$$fireUpdate();
                return this;
            }
            else {
                throw new Error('Invalid item added to hasMany');
            }
        }
        else {
            throw new Error('Cannot $add except to hasMany field');
        }
    };
    Model.prototype.modifyRelationship = function (key, item) {
        if (key in this.schema.relationships) {
            if (item.id >= 1) {
                this.dirty.relationships[key] = this.dirty.relationships[key] || [];
                this.dirty.relationships[key].push({
                    op: 'modify',
                    data: item,
                });
                // this.$$fireUpdate();
                return this;
            }
            else {
                throw new Error('Invalid item added to hasMany');
            }
        }
        else {
            throw new Error('Cannot $add except to hasMany field');
        }
    };
    Model.prototype.remove = function (key, item) {
        if (key in this.schema.relationships) {
            if (item.id >= 1) {
                if (!(key in this.dirty.relationships)) {
                    this.dirty.relationships[key] = [];
                }
                this.dirty.relationships[key].push({
                    op: 'remove',
                    data: item,
                });
                // this.$$fireUpdate();
                return this;
            }
            else {
                throw new Error('Invalid item $removed from hasMany');
            }
        }
        else {
            throw new Error('Cannot $remove except from hasMany field');
        }
    };
    // static rest(plump, opts) {
    //   const restOpts = Object.assign(
    //     {},
    //     opts,
    //     {
    //       url: `/${this.schema.name}/${opts.url}`,
    //     }
    //   );
    //   return plump.restRequest(restOpts);
    // }
    Model.applyDefaults = function (v) {
        return util_1.validateInput(this.schema, v);
    };
    ;
    Model.applyDelta = function (current, delta) {
        if (delta.op === 'add' || delta.op === 'modify') {
            var retVal = mergeOptions({}, current, delta.data);
            return retVal;
        }
        else if (delta.op === 'remove') {
            return undefined;
        }
        else {
            return current;
        }
    };
    ;
    Model.resolveAndOverlay = function (update, base) {
        if (base === void 0) { base = { attributes: {}, relationships: {} }; }
        var attributes = mergeOptions({}, base.attributes, update.attributes);
        var resolvedRelationships = this.resolveRelationships(update.relationships, base.relationships);
        return { attributes: attributes, relationships: resolvedRelationships };
    };
    Model.resolveRelationships = function (deltas, base) {
        var _this = this;
        if (base === void 0) { base = {}; }
        var updates = Object.keys(deltas).map(function (relName) {
            var resolved = _this.resolveRelationship(deltas[relName], base[relName]);
            return _a = {}, _a[relName] = resolved, _a;
            var _a;
        })
            .reduce(function (acc, curr) { return mergeOptions(acc, curr); }, {});
        return mergeOptions({}, base, updates);
    };
    Model.resolveRelationship = function (deltas, base) {
        if (base === void 0) { base = []; }
        var retVal = base.concat();
        deltas.forEach(function (delta) {
            if ((delta.op === 'add') || (delta.op === 'modify')) {
                var currentIndex = retVal.findIndex(function (v) { return v.id === delta.data.id; });
                if (currentIndex >= 0) {
                    retVal[currentIndex] = delta.data;
                }
                else {
                    retVal.push(delta.data);
                }
            }
            else if (delta.op === 'remove') {
                var currentIndex = retVal.findIndex(function (v) { return v.id === delta.data.id; });
                if (currentIndex >= 0) {
                    retVal.splice(currentIndex, 1);
                }
            }
        });
        return retVal;
    };
    return Model;
}());
Model.typeName = 'BASE';
Model.schema = {
    idAttribute: 'id',
    name: 'BASE',
    attributes: {},
    relationships: {},
};
exports.Model = Model;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUFNO0lBQ1osVUFBVSxFQUFFLEVBQUU7SUFDZCxhQUFhLEVBQUUsRUFBRTtDQUNsQixDQUFDO0FBUmtCLHNCQUFLIiwiZmlsZSI6Im1vZGVsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgbWVyZ2VPcHRpb25zIGZyb20gJ21lcmdlLW9wdGlvbnMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3Vic2NyaXB0aW9uLCBPYnNlcnZlciB9IGZyb20gJ3J4anMvUngnO1xuXG5pbXBvcnQgeyB2YWxpZGF0ZUlucHV0IH0gZnJvbSAnLi91dGlsJztcbmltcG9ydCB7XG4gIE1vZGVsRGF0YSxcbiAgTW9kZWxEZWx0YSxcbiAgTW9kZWxTY2hlbWEsXG4gIERpcnR5VmFsdWVzLFxuICBEaXJ0eU1vZGVsLFxuICBSZWxhdGlvbnNoaXBEZWx0YSxcbiAgUmVsYXRpb25zaGlwSXRlbSxcbn0gZnJvbSAnLi9kYXRhVHlwZXMnO1xuXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHdoZXJlIGVycm9yIGV2ZW50cyBvcmlnaW5hdGUgKHN0b3JhZ2Ugb3IgbW9kZWwpXG4vLyBhbmQgd2hvIGtlZXBzIGEgcm9sbC1iYWNrYWJsZSBkZWx0YVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTW9kZWwge1xuICBpZDogc3RyaW5nIHwgbnVtYmVyO1xuICBzdGF0aWMgdHlwZU5hbWUgPSAnQkFTRSc7XG4gIHN0YXRpYyBzY2hlbWE6IE1vZGVsU2NoZW1hID0ge1xuICAgIGlkQXR0cmlidXRlOiAnaWQnLFxuICAgIG5hbWU6ICdCQVNFJyxcbiAgICBhdHRyaWJ1dGVzOiB7fSxcbiAgICByZWxhdGlvbnNoaXBzOiB7fSxcbiAgfTtcblxuICBwcml2YXRlIGRpcnR5OiBEaXJ0eVZhbHVlcztcblxuICBnZXQgdHlwZU5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3JbJ3R5cGVOYW1lJ107XG4gIH1cblxuICBnZXQgc2NoZW1hKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yWydzY2hlbWEnXTtcbiAgfVxuXG4gIGRpcnR5RmllbGRzKCkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLmRpcnR5LmF0dHJpYnV0ZXMpXG4gICAgLmZpbHRlcihrID0+IGsgIT09IHRoaXMuc2NoZW1hLmlkQXR0cmlidXRlKVxuICAgIC5jb25jYXQoT2JqZWN0LmtleXModGhpcy5kaXJ0eS5yZWxhdGlvbnNoaXBzKSk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihvcHRzLCBwcml2YXRlIHBsdW1wKSB7XG4gICAgLy8gVE9ETzogRGVmaW5lIERlbHRhIGludGVyZmFjZVxuICAgIHRoaXMuZGlydHkgPSB7XG4gICAgICBhdHRyaWJ1dGVzOiB7fSwgLy8gU2ltcGxlIGtleS12YWx1ZVxuICAgICAgcmVsYXRpb25zaGlwczoge30sIC8vIHJlbE5hbWU6IERlbHRhW11cbiAgICB9O1xuICAgIHRoaXMuJCRjb3B5VmFsdWVzRnJvbShvcHRzKTtcbiAgICAvLyB0aGlzLiQkZmlyZVVwZGF0ZShvcHRzKTtcbiAgfVxuXG4gICQkY29weVZhbHVlc0Zyb20ob3B0cyA9IHt9KSB7XG4gICAgLy8gY29uc3QgaWRGaWVsZCA9IHRoaXMuY29uc3RydWN0b3IuJGlkIGluIG9wdHMgPyB0aGlzLmNvbnN0cnVjdG9yLiRpZCA6ICdpZCc7XG4gICAgLy8gdGhpc1t0aGlzLmNvbnN0cnVjdG9yLiRpZF0gPSBvcHRzW2lkRmllbGRdIHx8IHRoaXMuaWQ7XG4gICAgaWYgKCh0aGlzLmlkID09PSB1bmRlZmluZWQpICYmIChvcHRzW3RoaXMuc2NoZW1hLmlkQXR0cmlidXRlXSkpIHtcbiAgICAgIHRoaXMuaWQgPSBvcHRzW3RoaXMuc2NoZW1hLmlkQXR0cmlidXRlXTtcbiAgICB9XG4gICAgdGhpcy5kaXJ0eSA9IG1lcmdlT3B0aW9ucyh0aGlzLmRpcnR5LCB7IGF0dHJpYnV0ZXM6IG9wdHMgfSk7XG4gIH1cblxuICAkJHJlc2V0RGlydHkoKSB7XG4gICAgdGhpcy5kaXJ0eSA9IHtcbiAgICAgIGF0dHJpYnV0ZXM6IHt9LCAvLyBTaW1wbGUga2V5LXZhbHVlXG4gICAgICByZWxhdGlvbnNoaXBzOiB7fSwgLy8gcmVsTmFtZTogRGVsdGFbXVxuICAgIH07XG4gIH1cblxuICAvLyAkJGZpcmVVcGRhdGUodikge1xuICAvLyAgIGNvbnN0IHVwZGF0ZSA9IE1vZGVsLnJlc29sdmVBbmRPdmVybGF5KHRoaXMuZGlydHksIHYpO1xuICAvLyAgIGlmICh0aGlzLmlkKSB7XG4gIC8vICAgICB1cGRhdGUuaWQgPSB0aGlzLmlkO1xuICAvLyAgIH1cbiAgLy8gICB0aGlzWyRzdWJqZWN0XS5uZXh0KHVwZGF0ZSk7XG4gIC8vIH1cblxuICAvLyBBUEkgTUVUSE9EU1xuXG4gIGdldChvcHRzOiBzdHJpbmcgfCBzdHJpbmdbXSA9ICdhdHRyaWJ1dGVzJykge1xuICAgIC8vIElmIG9wdHMgaXMgZmFsc3kgKGkuZS4sIHVuZGVmaW5lZCksIGdldCBhdHRyaWJ1dGVzXG4gICAgLy8gT3RoZXJ3aXNlLCBnZXQgd2hhdCB3YXMgcmVxdWVzdGVkLFxuICAgIC8vIHdyYXBwaW5nIHRoZSByZXF1ZXN0IGluIGEgQXJyYXkgaWYgaXQgd2Fzbid0IGFscmVhZHkgb25lXG4gICAgY29uc3Qga2V5cyA9IG9wdHMgJiYgIUFycmF5LmlzQXJyYXkob3B0cykgPyBbb3B0c10gOiBvcHRzO1xuICAgIHJldHVybiB0aGlzLnBsdW1wLmdldCh0aGlzLCBrZXlzKVxuICAgIC50aGVuKHNlbGYgPT4ge1xuICAgICAgaWYgKCFzZWxmICYmIHRoaXMuZGlydHlGaWVsZHMoKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZGlydHlGaWVsZHMoKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCByZXNvbHZlZCA9IE1vZGVsLnJlc29sdmVBbmRPdmVybGF5KHRoaXMuZGlydHksIHNlbGYgfHwgdW5kZWZpbmVkKTtcbiAgICAgICAgcmV0dXJuIG1lcmdlT3B0aW9ucyh7fSwgc2VsZiB8fCB7IGlkOiB0aGlzLmlkLCB0eXBlOiB0aGlzLnR5cGVOYW1lIH0sIHJlc29sdmVkKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGJ1bGtHZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMucGx1bXAuYnVsa0dldCh0aGlzLmNvbnN0cnVjdG9yLCB0aGlzLmlkKTtcbiAgfVxuXG4gIC8vIFRPRE86IFNob3VsZCAkc2F2ZSB1bHRpbWF0ZWx5IHJldHVybiB0aGlzLmdldCgpP1xuICBzYXZlKCkge1xuICAgIGNvbnN0IHVwZGF0ZTogRGlydHlNb2RlbCA9IG1lcmdlT3B0aW9ucyhcbiAgICAgIHsgaWQ6IHRoaXMuaWQsIHR5cGVOYW1lOiB0aGlzLnR5cGVOYW1lIH0sXG4gICAgICB0aGlzLmRpcnR5XG4gICAgKTtcbiAgICByZXR1cm4gdGhpcy5wbHVtcC5zYXZlKHVwZGF0ZSlcbiAgICAudGhlbigodXBkYXRlZCkgPT4ge1xuICAgICAgdGhpcy4kJHJlc2V0RGlydHkoKTtcbiAgICAgIGlmICh1cGRhdGVkLmlkKSB7XG4gICAgICAgIHRoaXMuaWQgPSB1cGRhdGVkLmlkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuZ2V0KCk7XG4gICAgfSk7XG4gIH1cblxuICBzZXQodXBkYXRlKSB7XG4gICAgY29uc3QgZmxhdCA9IHVwZGF0ZS5hdHRyaWJ1dGVzIHx8IHVwZGF0ZTtcbiAgICAvLyBGaWx0ZXIgb3V0IG5vbi1hdHRyaWJ1dGUga2V5c1xuICAgIGNvbnN0IHNhbml0aXplZCA9IE9iamVjdC5rZXlzKGZsYXQpXG4gICAgICAuZmlsdGVyKGsgPT4gayBpbiB0aGlzLnNjaGVtYS5hdHRyaWJ1dGVzKVxuICAgICAgLm1hcChrID0+IHsgcmV0dXJuIHsgW2tdOiBmbGF0W2tdIH07IH0pXG4gICAgICAucmVkdWNlKChhY2MsIGN1cnIpID0+IG1lcmdlT3B0aW9ucyhhY2MsIGN1cnIpLCB7fSk7XG5cbiAgICB0aGlzLiQkY29weVZhbHVlc0Zyb20oc2FuaXRpemVkKTtcbiAgICAvLyB0aGlzLiQkZmlyZVVwZGF0ZShzYW5pdGl6ZWQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgc3Vic2NyaWJlKGNiOiBPYnNlcnZlcjxNb2RlbERhdGE+KTogU3Vic2NyaXB0aW9uO1xuICBzdWJzY3JpYmUoZmllbGRzOiBzdHJpbmcgfCBzdHJpbmdbXSwgY2I6IE9ic2VydmVyPE1vZGVsRGF0YT4pOiBTdWJzY3JpcHRpb247XG4gIHN1YnNjcmliZShhcmcxOiBPYnNlcnZlcjxNb2RlbERhdGE+IHwgc3RyaW5nIHwgc3RyaW5nW10sIGFyZzI/OiBPYnNlcnZlcjxNb2RlbERhdGE+KTogU3Vic2NyaXB0aW9uIHtcblxuICAgIGxldCBmaWVsZHM6IHN0cmluZ1tdID0gW107XG4gICAgbGV0IGNiOiBPYnNlcnZlcjxNb2RlbERhdGE+ID0gbnVsbDtcblxuICAgIGlmIChhcmcyKSB7XG4gICAgICBjYiA9IGFyZzI7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShhcmcxKSkge1xuICAgICAgICBmaWVsZHMgPSBhcmcxIGFzIHN0cmluZ1tdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmllbGRzID0gW2FyZzEgYXMgc3RyaW5nXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2IgPSBhcmcxIGFzIE9ic2VydmVyPE1vZGVsRGF0YT47XG4gICAgICBmaWVsZHMgPSBbJ2F0dHJpYnV0ZXMnXTtcbiAgICB9XG5cbiAgICBpZiAoZmllbGRzLmluZGV4T2YoJ3JlbGF0aW9uc2hpcHMnKSA+PSAwKSB7XG4gICAgICBmaWVsZHMgPSBmaWVsZHMuY29uY2F0KFxuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLnNjaGVtYS5yZWxhdGlvbnNoaXBzKS5tYXAoayA9PiBgcmVsYXRpb25zaGlwcy4ke2t9YClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgaG90cyA9IHRoaXMucGx1bXAuc3RvcmFnZS5maWx0ZXIocyA9PiBzLmhvdCh0aGlzLnR5cGVOYW1lLCB0aGlzLmlkKSk7XG4gICAgY29uc3QgY29sZHMgPSB0aGlzLnBsdW1wLnN0b3JhZ2UuZmlsdGVyKHMgPT4gIXMuaG90KHRoaXMudHlwZU5hbWUsIHRoaXMuaWQpKTtcbiAgICBjb25zdCB0ZXJtaW5hbCA9IHRoaXMucGx1bXAudGVybWluYWw7XG5cbiAgICBjb25zdCBwcmVsb2FkJCA9IE9ic2VydmFibGUuZnJvbShob3RzKVxuICAgIC5mbGF0TWFwKChzOiBTdG9yYWdlKSA9PiBPYnNlcnZhYmxlLmZyb21Qcm9taXNlKHMucmVhZCh0aGlzLCBmaWVsZHMpKSlcbiAgICAuZGVmYXVsdElmRW1wdHkobnVsbClcbiAgICAuZmxhdE1hcCgodikgPT4ge1xuICAgICAgaWYgKHYgIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIE9ic2VydmFibGUub2Yodik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCB0ZXJtaW5hbCQgPSBPYnNlcnZhYmxlLm9mKHRlcm1pbmFsKVxuICAgICAgICAuZmxhdE1hcCgoczogU3RvcmFnZSkgPT4gT2JzZXJ2YWJsZS5mcm9tUHJvbWlzZShzLnJlYWQodGhpcywgZmllbGRzKSkpXG4gICAgICAgIC5zaGFyZSgpO1xuICAgICAgICBjb25zdCBjb2xkJCA9IE9ic2VydmFibGUuZnJvbShjb2xkcylcbiAgICAgICAgLmZsYXRNYXAoKHM6IFN0b3JhZ2UpID0+IE9ic2VydmFibGUuZnJvbVByb21pc2Uocy5yZWFkKHRoaXMsIGZpZWxkcykpKTtcbiAgICAgICAgcmV0dXJuIE9ic2VydmFibGUubWVyZ2UoXG4gICAgICAgICAgdGVybWluYWwkLFxuICAgICAgICAgIGNvbGQkLnRha2VVbnRpbCh0ZXJtaW5hbCQpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgLy8gVE9ETzogY2FjaGVhYmxlIHJlYWRzXG4gICAgLy8gY29uc3Qgd2F0Y2hSZWFkJCA9IE9ic2VydmFibGUuZnJvbSh0ZXJtaW5hbClcbiAgICAvLyAuZmxhdE1hcChzID0+IHMucmVhZCQuZmlsdGVyKHYgPT4gdi50eXBlID09PSB0aGlzLnR5cGVOYW1lICYmIHYuaWQgPT09IHRoaXMuaWQpKTtcbiAgICBjb25zdCB3YXRjaFdyaXRlJCA9IHRlcm1pbmFsLndyaXRlJFxuICAgIC5maWx0ZXIoKHY6IE1vZGVsRGVsdGEpID0+IHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgICh2LnR5cGVOYW1lID09PSB0aGlzLnR5cGVOYW1lKSAmJlxuICAgICAgICAodi5pZCA9PT0gdGhpcy5pZCkgJiZcbiAgICAgICAgKHYuaW52YWxpZGF0ZS5zb21lKGkgPT4gZmllbGRzLmluZGV4T2YoaSkgPj0gMCkpXG4gICAgICApO1xuICAgIH0pXG4gICAgLmZsYXRNYXBUbyhcbiAgICAgIE9ic2VydmFibGUub2YodGVybWluYWwpXG4gICAgICAuZmxhdE1hcCgoczogU3RvcmFnZSkgPT4gT2JzZXJ2YWJsZS5mcm9tUHJvbWlzZShzLnJlYWQodGhpcywgZmllbGRzKSkpXG4gICAgKTtcbiAgICAvLyApO1xuICAgIHJldHVybiBwcmVsb2FkJC5tZXJnZSh3YXRjaFdyaXRlJClcbiAgICAuc3Vic2NyaWJlKGNiKTtcbiAgfVxuXG4gIGRlbGV0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5wbHVtcC5kZWxldGUodGhpcyk7XG4gIH1cblxuICAkcmVzdChvcHRzKSB7XG4gICAgY29uc3QgcmVzdE9wdHMgPSBPYmplY3QuYXNzaWduKFxuICAgICAge30sXG4gICAgICBvcHRzLFxuICAgICAge1xuICAgICAgICB1cmw6IGAvJHt0aGlzLmNvbnN0cnVjdG9yWyd0eXBlJ119LyR7dGhpcy5pZH0vJHtvcHRzLnVybH1gLFxuICAgICAgfVxuICAgICk7XG4gICAgcmV0dXJuIHRoaXMucGx1bXAucmVzdFJlcXVlc3QocmVzdE9wdHMpLnRoZW4ocmVzID0+IHJlcy5kYXRhKTtcbiAgfVxuXG4gIGFkZChrZXk6IHN0cmluZywgaXRlbTogUmVsYXRpb25zaGlwSXRlbSkge1xuICAgIGlmIChrZXkgaW4gdGhpcy5zY2hlbWEucmVsYXRpb25zaGlwcykge1xuICAgICAgaWYgKGl0ZW0uaWQgPj0gMSkge1xuICAgICAgICBpZiAodGhpcy5kaXJ0eS5yZWxhdGlvbnNoaXBzW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRoaXMuZGlydHkucmVsYXRpb25zaGlwc1trZXldID0gW107XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRpcnR5LnJlbGF0aW9uc2hpcHNba2V5XS5wdXNoKHtcbiAgICAgICAgICBvcDogJ2FkZCcsXG4gICAgICAgICAgZGF0YTogaXRlbSxcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIHRoaXMuJCRmaXJlVXBkYXRlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGl0ZW0gYWRkZWQgdG8gaGFzTWFueScpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCAkYWRkIGV4Y2VwdCB0byBoYXNNYW55IGZpZWxkJyk7XG4gICAgfVxuICB9XG5cbiAgbW9kaWZ5UmVsYXRpb25zaGlwKGtleTogc3RyaW5nLCBpdGVtOiBSZWxhdGlvbnNoaXBJdGVtKSB7XG4gICAgaWYgKGtleSBpbiB0aGlzLnNjaGVtYS5yZWxhdGlvbnNoaXBzKSB7XG4gICAgICBpZiAoaXRlbS5pZCA+PSAxKSB7XG4gICAgICAgIHRoaXMuZGlydHkucmVsYXRpb25zaGlwc1trZXldID0gdGhpcy5kaXJ0eS5yZWxhdGlvbnNoaXBzW2tleV0gfHwgW107XG4gICAgICAgIHRoaXMuZGlydHkucmVsYXRpb25zaGlwc1trZXldLnB1c2goe1xuICAgICAgICAgIG9wOiAnbW9kaWZ5JyxcbiAgICAgICAgICBkYXRhOiBpdGVtLFxuICAgICAgICB9KTtcbiAgICAgICAgLy8gdGhpcy4kJGZpcmVVcGRhdGUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaXRlbSBhZGRlZCB0byBoYXNNYW55Jyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90ICRhZGQgZXhjZXB0IHRvIGhhc01hbnkgZmllbGQnKTtcbiAgICB9XG4gIH1cblxuICByZW1vdmUoa2V5OiBzdHJpbmcsIGl0ZW06IFJlbGF0aW9uc2hpcEl0ZW0pIHtcbiAgICBpZiAoa2V5IGluIHRoaXMuc2NoZW1hLnJlbGF0aW9uc2hpcHMpIHtcbiAgICAgIGlmIChpdGVtLmlkID49IDEpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIHRoaXMuZGlydHkucmVsYXRpb25zaGlwcykpIHtcbiAgICAgICAgICB0aGlzLmRpcnR5LnJlbGF0aW9uc2hpcHNba2V5XSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGlydHkucmVsYXRpb25zaGlwc1trZXldLnB1c2goe1xuICAgICAgICAgIG9wOiAncmVtb3ZlJyxcbiAgICAgICAgICBkYXRhOiBpdGVtLFxuICAgICAgICB9KTtcbiAgICAgICAgLy8gdGhpcy4kJGZpcmVVcGRhdGUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaXRlbSAkcmVtb3ZlZCBmcm9tIGhhc01hbnknKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgJHJlbW92ZSBleGNlcHQgZnJvbSBoYXNNYW55IGZpZWxkJyk7XG4gICAgfVxuICB9XG5cblxuICAvLyBzdGF0aWMgcmVzdChwbHVtcCwgb3B0cykge1xuICAvLyAgIGNvbnN0IHJlc3RPcHRzID0gT2JqZWN0LmFzc2lnbihcbiAgLy8gICAgIHt9LFxuICAvLyAgICAgb3B0cyxcbiAgLy8gICAgIHtcbiAgLy8gICAgICAgdXJsOiBgLyR7dGhpcy5zY2hlbWEubmFtZX0vJHtvcHRzLnVybH1gLFxuICAvLyAgICAgfVxuICAvLyAgICk7XG4gIC8vICAgcmV0dXJuIHBsdW1wLnJlc3RSZXF1ZXN0KHJlc3RPcHRzKTtcbiAgLy8gfVxuXG4gIHN0YXRpYyBhcHBseURlZmF1bHRzKHYpIHtcbiAgICByZXR1cm4gdmFsaWRhdGVJbnB1dCh0aGlzLnNjaGVtYSwgdik7XG4gIH07XG5cbiAgc3RhdGljIGFwcGx5RGVsdGEoY3VycmVudCwgZGVsdGEpIHtcbiAgICBpZiAoZGVsdGEub3AgPT09ICdhZGQnIHx8IGRlbHRhLm9wID09PSAnbW9kaWZ5Jykge1xuICAgICAgY29uc3QgcmV0VmFsID0gbWVyZ2VPcHRpb25zKHt9LCBjdXJyZW50LCBkZWx0YS5kYXRhKTtcbiAgICAgIHJldHVybiByZXRWYWw7XG4gICAgfSBlbHNlIGlmIChkZWx0YS5vcCA9PT0gJ3JlbW92ZScpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjdXJyZW50O1xuICAgIH1cbiAgfTtcblxuICBzdGF0aWMgcmVzb2x2ZUFuZE92ZXJsYXkodXBkYXRlLCBiYXNlID0geyBhdHRyaWJ1dGVzOiB7fSwgcmVsYXRpb25zaGlwczoge30gfSkge1xuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBtZXJnZU9wdGlvbnMoe30sIGJhc2UuYXR0cmlidXRlcywgdXBkYXRlLmF0dHJpYnV0ZXMpO1xuICAgIGNvbnN0IHJlc29sdmVkUmVsYXRpb25zaGlwcyA9IHRoaXMucmVzb2x2ZVJlbGF0aW9uc2hpcHModXBkYXRlLnJlbGF0aW9uc2hpcHMsIGJhc2UucmVsYXRpb25zaGlwcyk7XG4gICAgcmV0dXJuIHsgYXR0cmlidXRlcywgcmVsYXRpb25zaGlwczogcmVzb2x2ZWRSZWxhdGlvbnNoaXBzIH07XG4gIH1cblxuICBzdGF0aWMgcmVzb2x2ZVJlbGF0aW9uc2hpcHMoZGVsdGFzLCBiYXNlID0ge30pIHtcbiAgICBjb25zdCB1cGRhdGVzID0gT2JqZWN0LmtleXMoZGVsdGFzKS5tYXAocmVsTmFtZSA9PiB7XG4gICAgICBjb25zdCByZXNvbHZlZCA9IHRoaXMucmVzb2x2ZVJlbGF0aW9uc2hpcChkZWx0YXNbcmVsTmFtZV0sIGJhc2VbcmVsTmFtZV0pO1xuICAgICAgcmV0dXJuIHsgW3JlbE5hbWVdOiByZXNvbHZlZCB9O1xuICAgIH0pXG4gICAgLnJlZHVjZSgoYWNjLCBjdXJyKSA9PiBtZXJnZU9wdGlvbnMoYWNjLCBjdXJyKSwge30pO1xuICAgIHJldHVybiBtZXJnZU9wdGlvbnMoe30sIGJhc2UsIHVwZGF0ZXMpO1xuICB9XG5cbiAgc3RhdGljIHJlc29sdmVSZWxhdGlvbnNoaXAoZGVsdGFzOiBSZWxhdGlvbnNoaXBEZWx0YVtdLCBiYXNlOiBSZWxhdGlvbnNoaXBJdGVtW10gPSBbXSkge1xuICAgIGNvbnN0IHJldFZhbCA9IGJhc2UuY29uY2F0KCk7XG4gICAgZGVsdGFzLmZvckVhY2goKGRlbHRhKSA9PiB7XG4gICAgICBpZiAoKGRlbHRhLm9wID09PSAnYWRkJykgfHwgKGRlbHRhLm9wID09PSAnbW9kaWZ5JykpIHtcbiAgICAgICAgY29uc3QgY3VycmVudEluZGV4ID0gcmV0VmFsLmZpbmRJbmRleCh2ID0+IHYuaWQgPT09IGRlbHRhLmRhdGEuaWQpO1xuICAgICAgICBpZiAoY3VycmVudEluZGV4ID49IDApIHtcbiAgICAgICAgICByZXRWYWxbY3VycmVudEluZGV4XSA9IGRlbHRhLmRhdGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0VmFsLnB1c2goZGVsdGEuZGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZGVsdGEub3AgPT09ICdyZW1vdmUnKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRJbmRleCA9IHJldFZhbC5maW5kSW5kZXgodiA9PiB2LmlkID09PSBkZWx0YS5kYXRhLmlkKTtcbiAgICAgICAgaWYgKGN1cnJlbnRJbmRleCA+PSAwKSB7XG4gICAgICAgICAgcmV0VmFsLnNwbGljZShjdXJyZW50SW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldFZhbDtcbiAgfVxuXG59XG4iXX0=
