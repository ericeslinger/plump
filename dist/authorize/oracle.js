"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function Or() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return Promise.all(args).then(function (results) { return results.some(function (k) { return k; }); });
}
exports.Or = Or;
function And() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return Promise.all(args).then(function (results) { return results.every(function (k) { return k; }); });
}
exports.And = And;
var Oracle = (function () {
    function Oracle() {
        this.authorizers = {};
    }
    Oracle.prototype.addAuthorizer = function (auth, forType) {
        var authKeys = Object.keys(auth.relationships);
        var forKeys = Object.keys(forType.relationships);
        var missing = forKeys.filter(function (k) { return authKeys.indexOf(k) < 0; });
        if (missing.length > 0) {
            throw new Error("Missing relationship authorizer(s) " + missing.join(', '));
        }
        this.authorizers[auth.typeName] = auth;
    };
    Oracle.prototype.authorizeAttributesCreate = function (actor, item, data) {
        return this.authorizers[item.typeName].attributes.authorizeCreate(actor, item, data);
    };
    Oracle.prototype.authorizeAttributesRead = function (actor, item) {
        return this.authorizers[item.typeName].attributes.authorizeRead(actor, item);
    };
    Oracle.prototype.authorizeAttributesUpdate = function (actor, item, data) {
        return this.authorizers[item.typeName].attributes.authorizeUpdate(actor, item, data);
    };
    Oracle.prototype.authorizeAttributesDelete = function (actor, item) {
        return this.authorizers[item.typeName].attributes.authorizeDelete(actor, item);
    };
    Oracle.prototype.authorizeRelationshipCreate = function (actor, opts) {
        return this.authorizers[opts.parent.typeName].relationships[opts.relationship].authorizeCreate(actor, opts);
    };
    Oracle.prototype.authorizeRelationshipRead = function (actor, opts) {
        return this.authorizers[opts.parent.typeName].relationships[opts.relationship].authorizeRead(actor, opts);
    };
    Oracle.prototype.authorizeRelationshipUpdate = function (actor, opts) {
        return this.authorizers[opts.parent.typeName].relationships[opts.relationship].authorizeUpdate(actor, opts);
    };
    Oracle.prototype.authorizeRelationshipDelete = function (actor, opts) {
        return this.authorizers[opts.parent.typeName].relationships[opts.relationship].authorizeDelete(actor, opts);
    };
    return Oracle;
}());
exports.Oracle = Oracle;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hdXRob3JpemUvb3JhY2xlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBR0E7SUFBbUIsY0FBMkI7U0FBM0IsVUFBMkIsRUFBM0IscUJBQTJCLEVBQTNCLElBQTJCO1FBQTNCLHlCQUEyQjs7SUFDNUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsT0FBTyxJQUFLLE9BQUEsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsRUFBRCxDQUFDLENBQUMsRUFBcEIsQ0FBb0IsQ0FBQyxDQUFDO0FBQ25FLENBQUM7QUFGRCxnQkFFQztBQUNEO0lBQW9CLGNBQTJCO1NBQTNCLFVBQTJCLEVBQTNCLHFCQUEyQixFQUEzQixJQUEyQjtRQUEzQix5QkFBMkI7O0lBQzdDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLE9BQU8sSUFBSyxPQUFBLE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLEVBQUQsQ0FBQyxDQUFDLEVBQXJCLENBQXFCLENBQUMsQ0FBQztBQUNwRSxDQUFDO0FBRkQsa0JBRUM7QUFFRDtJQUFBO1FBQ1UsZ0JBQVcsR0FBMkMsRUFBRSxDQUFDO0lBc0NuRSxDQUFDO0lBcENDLDhCQUFhLEdBQWIsVUFBYyxJQUEwQixFQUFFLE9BQW9CO1FBQzVELElBQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ2pELElBQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ25ELElBQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBdkIsQ0FBdUIsQ0FBQyxDQUFDO1FBQzdELEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN2QixNQUFNLElBQUksS0FBSyxDQUFDLHdDQUFzQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBRyxDQUFDLENBQUM7UUFDOUUsQ0FBQztRQUNELElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQztJQUN6QyxDQUFDO0lBRUQsMENBQXlCLEdBQXpCLFVBQTBCLEtBQXFCLEVBQUUsSUFBb0IsRUFBRSxJQUF5QjtRQUM5RixNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3ZGLENBQUM7SUFDRCx3Q0FBdUIsR0FBdkIsVUFBd0IsS0FBcUIsRUFBRSxJQUFvQjtRQUNqRSxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDL0UsQ0FBQztJQUNELDBDQUF5QixHQUF6QixVQUEwQixLQUFxQixFQUFFLElBQW9CLEVBQUUsSUFBZTtRQUNwRixNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3ZGLENBQUM7SUFDRCwwQ0FBeUIsR0FBekIsVUFBMEIsS0FBcUIsRUFBRSxJQUFvQjtRQUNuRSxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDakYsQ0FBQztJQUdELDRDQUEyQixHQUEzQixVQUE0QixLQUFxQixFQUFFLElBQW9DO1FBQ3JGLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzlHLENBQUM7SUFDRCwwQ0FBeUIsR0FBekIsVUFBMEIsS0FBcUIsRUFBRSxJQUFvQztRQUNuRixNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM1RyxDQUFDO0lBQ0QsNENBQTJCLEdBQTNCLFVBQTRCLEtBQXFCLEVBQUUsSUFBb0M7UUFDckYsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUcsQ0FBQztJQUNELDRDQUEyQixHQUEzQixVQUE0QixLQUFxQixFQUFFLElBQW9DO1FBQ3JGLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzlHLENBQUM7SUFDSCxhQUFDO0FBQUQsQ0F2Q0EsQUF1Q0MsSUFBQTtBQXZDWSx3QkFBTSIsImZpbGUiOiJhdXRob3JpemUvb3JhY2xlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXV0aG9yaXplckRlZmluaXRpb24sIFJlbGF0aW9uc2hpcEF1dGhvcml6ZUFyZ3VtZW50cyB9IGZyb20gJy4vZGF0YVR5cGVzJztcbmltcG9ydCB7IE1vZGVsU2NoZW1hLCBNb2RlbFJlZmVyZW5jZSwgTW9kZWxEYXRhLCBJbmRlZmluaXRlTW9kZWxEYXRhIH0gZnJvbSAnLi4vZGF0YVR5cGVzJztcblxuZXhwb3J0IGZ1bmN0aW9uIE9yKC4uLmFyZ3M6IFByb21pc2U8Ym9vbGVhbj5bXSk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICByZXR1cm4gUHJvbWlzZS5hbGwoYXJncykudGhlbigocmVzdWx0cykgPT4gcmVzdWx0cy5zb21lKGsgPT4gaykpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIEFuZCguLi5hcmdzOiBQcm9taXNlPGJvb2xlYW4+W10pOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKGFyZ3MpLnRoZW4oKHJlc3VsdHMpID0+IHJlc3VsdHMuZXZlcnkoayA9PiBrKSk7XG59XG5cbmV4cG9ydCBjbGFzcyBPcmFjbGUge1xuICBwcml2YXRlIGF1dGhvcml6ZXJzOiB7W25hbWU6IHN0cmluZ106IEF1dGhvcml6ZXJEZWZpbml0aW9ufSA9IHt9O1xuXG4gIGFkZEF1dGhvcml6ZXIoYXV0aDogQXV0aG9yaXplckRlZmluaXRpb24sIGZvclR5cGU6IE1vZGVsU2NoZW1hKSB7XG4gICAgY29uc3QgYXV0aEtleXMgPSBPYmplY3Qua2V5cyhhdXRoLnJlbGF0aW9uc2hpcHMpO1xuICAgIGNvbnN0IGZvcktleXMgPSBPYmplY3Qua2V5cyhmb3JUeXBlLnJlbGF0aW9uc2hpcHMpO1xuICAgIGNvbnN0IG1pc3NpbmcgPSBmb3JLZXlzLmZpbHRlcihrID0+IGF1dGhLZXlzLmluZGV4T2YoaykgPCAwKTtcbiAgICBpZiAobWlzc2luZy5sZW5ndGggPiAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE1pc3NpbmcgcmVsYXRpb25zaGlwIGF1dGhvcml6ZXIocykgJHttaXNzaW5nLmpvaW4oJywgJyl9YCk7XG4gICAgfVxuICAgIHRoaXMuYXV0aG9yaXplcnNbYXV0aC50eXBlTmFtZV0gPSBhdXRoO1xuICB9XG5cbiAgYXV0aG9yaXplQXR0cmlidXRlc0NyZWF0ZShhY3RvcjogTW9kZWxSZWZlcmVuY2UsIGl0ZW06IE1vZGVsUmVmZXJlbmNlLCBkYXRhOiBJbmRlZmluaXRlTW9kZWxEYXRhKSB7XG4gICAgcmV0dXJuIHRoaXMuYXV0aG9yaXplcnNbaXRlbS50eXBlTmFtZV0uYXR0cmlidXRlcy5hdXRob3JpemVDcmVhdGUoYWN0b3IsIGl0ZW0sIGRhdGEpO1xuICB9XG4gIGF1dGhvcml6ZUF0dHJpYnV0ZXNSZWFkKGFjdG9yOiBNb2RlbFJlZmVyZW5jZSwgaXRlbTogTW9kZWxSZWZlcmVuY2UpIHtcbiAgICByZXR1cm4gdGhpcy5hdXRob3JpemVyc1tpdGVtLnR5cGVOYW1lXS5hdHRyaWJ1dGVzLmF1dGhvcml6ZVJlYWQoYWN0b3IsIGl0ZW0pO1xuICB9XG4gIGF1dGhvcml6ZUF0dHJpYnV0ZXNVcGRhdGUoYWN0b3I6IE1vZGVsUmVmZXJlbmNlLCBpdGVtOiBNb2RlbFJlZmVyZW5jZSwgZGF0YTogTW9kZWxEYXRhKSB7XG4gICAgcmV0dXJuIHRoaXMuYXV0aG9yaXplcnNbaXRlbS50eXBlTmFtZV0uYXR0cmlidXRlcy5hdXRob3JpemVVcGRhdGUoYWN0b3IsIGl0ZW0sIGRhdGEpO1xuICB9XG4gIGF1dGhvcml6ZUF0dHJpYnV0ZXNEZWxldGUoYWN0b3I6IE1vZGVsUmVmZXJlbmNlLCBpdGVtOiBNb2RlbFJlZmVyZW5jZSkge1xuICAgIHJldHVybiB0aGlzLmF1dGhvcml6ZXJzW2l0ZW0udHlwZU5hbWVdLmF0dHJpYnV0ZXMuYXV0aG9yaXplRGVsZXRlKGFjdG9yLCBpdGVtKTtcbiAgfVxuXG5cbiAgYXV0aG9yaXplUmVsYXRpb25zaGlwQ3JlYXRlKGFjdG9yOiBNb2RlbFJlZmVyZW5jZSwgb3B0czogUmVsYXRpb25zaGlwQXV0aG9yaXplQXJndW1lbnRzKSB7XG4gICAgcmV0dXJuIHRoaXMuYXV0aG9yaXplcnNbb3B0cy5wYXJlbnQudHlwZU5hbWVdLnJlbGF0aW9uc2hpcHNbb3B0cy5yZWxhdGlvbnNoaXBdLmF1dGhvcml6ZUNyZWF0ZShhY3Rvciwgb3B0cyk7XG4gIH1cbiAgYXV0aG9yaXplUmVsYXRpb25zaGlwUmVhZChhY3RvcjogTW9kZWxSZWZlcmVuY2UsIG9wdHM6IFJlbGF0aW9uc2hpcEF1dGhvcml6ZUFyZ3VtZW50cykge1xuICAgIHJldHVybiB0aGlzLmF1dGhvcml6ZXJzW29wdHMucGFyZW50LnR5cGVOYW1lXS5yZWxhdGlvbnNoaXBzW29wdHMucmVsYXRpb25zaGlwXS5hdXRob3JpemVSZWFkKGFjdG9yLCBvcHRzKTtcbiAgfVxuICBhdXRob3JpemVSZWxhdGlvbnNoaXBVcGRhdGUoYWN0b3I6IE1vZGVsUmVmZXJlbmNlLCBvcHRzOiBSZWxhdGlvbnNoaXBBdXRob3JpemVBcmd1bWVudHMpIHtcbiAgICByZXR1cm4gdGhpcy5hdXRob3JpemVyc1tvcHRzLnBhcmVudC50eXBlTmFtZV0ucmVsYXRpb25zaGlwc1tvcHRzLnJlbGF0aW9uc2hpcF0uYXV0aG9yaXplVXBkYXRlKGFjdG9yLCBvcHRzKTtcbiAgfVxuICBhdXRob3JpemVSZWxhdGlvbnNoaXBEZWxldGUoYWN0b3I6IE1vZGVsUmVmZXJlbmNlLCBvcHRzOiBSZWxhdGlvbnNoaXBBdXRob3JpemVBcmd1bWVudHMpIHtcbiAgICByZXR1cm4gdGhpcy5hdXRob3JpemVyc1tvcHRzLnBhcmVudC50eXBlTmFtZV0ucmVsYXRpb25zaGlwc1tvcHRzLnJlbGF0aW9uc2hpcF0uYXV0aG9yaXplRGVsZXRlKGFjdG9yLCBvcHRzKTtcbiAgfVxufVxuIl19
