"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Oracle = (function () {
    function Oracle(keyService) {
        this.keyService = keyService;
        this.authorizers = {};
    }
    Oracle.prototype.addAuthorizer = function (auth, forType) {
        var authKeys = Object.keys(auth.relationships);
        var forKeys = Object.keys(forType.relationships);
        var missing = forKeys.filter(function (k) { return authKeys.indexOf(k) < 0; });
        if (missing.length > 0) {
            throw new Error("Missing relationship authorizer(s) " + missing.join(', '));
        }
        this.authorizers[forType.name] = auth;
    };
    Oracle.prototype.dispatch = function (request) {
        var _this = this;
        return Promise.resolve()
            .then(function () {
            if (request.kind === 'relationship') {
                var relationshipAuthorizer = _this.authorizers[request.parent.type].relationships[request.relationship];
                if (request.action === 'create') {
                    return relationshipAuthorizer.authorizeCreate(request);
                }
                else if (request.action === 'read') {
                    return relationshipAuthorizer.authorizeRead(request);
                }
                else if (request.action === 'update') {
                    return relationshipAuthorizer.authorizeUpdate(request);
                }
                else if (request.action === 'delete') {
                    return relationshipAuthorizer.authorizeDelete(request);
                }
            }
            else if (request.kind === 'attributes') {
                if (request.action === 'create') {
                    return _this.authorizers[request.data.type].attributes.authorizeCreate(request);
                }
                else if (request.action === 'read') {
                    return _this.authorizers[request.target.type].attributes.authorizeRead(request);
                }
                else if (request.action === 'update') {
                    return _this.authorizers[request.target.type].attributes.authorizeUpdate(request);
                }
                else if (request.action === 'delete') {
                    return _this.authorizers[request.target.type].attributes.authorizeDelete(request);
                }
            }
            else if (request.kind === 'compound') {
                return Promise.all(request.list.map(function (v) { return _this.dispatch(v); }))
                    .then(function (res) { return request.combinator === 'or' ? res.some(function (v) { return v.result; }) : res.every(function (v) { return v.result; }); })
                    .then(function (f) { return ({ kind: 'final', result: f }); });
            }
        }).then(function (v) {
            if (v.kind === 'final') {
                return v;
            }
            else if (v.kind === 'delegated') {
                return _this.dispatch(v.delegate);
            }
        });
    };
    Oracle.prototype.authorize = function (request) {
        return this.dispatch(request)
            .then(function (f) { return f.result; });
    };
    return Oracle;
}());
exports.Oracle = Oracle;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
